'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("FarmaciaSJDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class FarmaciaSJDataSet
    Inherits System.Data.DataSet
    
    Private tableCOMPRA As COMPRADataTable
    
    Private tableDETALLE_COMPRA As DETALLE_COMPRADataTable
    
    Private tableDETALLE_VENTA As DETALLE_VENTADataTable
    
    Private tableEMPLEADO As EMPLEADODataTable
    
    Private tableHISTORICO_EMPLEADO As HISTORICO_EMPLEADODataTable
    
    Private tableHISTORICO_IMPUESTO As HISTORICO_IMPUESTODataTable
    
    Private tableIMPUESTO As IMPUESTODataTable
    
    Private tableLOTE As LOTEDataTable
    
    Private tableOTROS_GASTOS As OTROS_GASTOSDataTable
    
    Private tablePRODUCTO As PRODUCTODataTable
    
    Private tablePROVEEDOR As PROVEEDORDataTable
    
    Private tablePROVEEDOR_PRODUCTO As PROVEEDOR_PRODUCTODataTable
    
    Private tableTELEFONO_PROVEEDOR As TELEFONO_PROVEEDORDataTable
    
    Private tableVENTA As VENTADataTable
    
    Private tablePEDIDO_FRECUENTE As PEDIDO_FRECUENTEDataTable
    
    Private tableCLIENTE As CLIENTEDataTable
    
    Private tableLINEA As LINEADataTable
    
    Private relationFK_COMPRA_PROVEEDOR As System.Data.DataRelation
    
    Private relationFK_DETALLE_COMPRA_COMPRA As System.Data.DataRelation
    
    Private relationFK_DETALLE_COMPRA_PRODUCTO As System.Data.DataRelation
    
    Private relationFK_DETALLE_VENTA_HISTORICO_IMPUESTO As System.Data.DataRelation
    
    Private relationFK_DETALLE_VENTA_LOTE As System.Data.DataRelation
    
    Private relationFK_DETALLE_VENTA_VENTA As System.Data.DataRelation
    
    Private relationFK_HISTORICO_EMPLEADO_EMPLEADO As System.Data.DataRelation
    
    Private relationFK_HISTORICO_IMPUESTO_IMPUESTO As System.Data.DataRelation
    
    Private relationFK_LOTE_PRODUCTO As System.Data.DataRelation
    
    Private relationFK_PROVEEDOR_PRODUCTO_PRODUCTO As System.Data.DataRelation
    
    Private relationFK_PROVEEDOR_PRODUCTO_PROVEEDOR As System.Data.DataRelation
    
    Private relationFK_TELEFONO_PROVEEDOR_PROVEEDOR As System.Data.DataRelation
    
    Private relationFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE As System.Data.DataRelation
    
    Private relationFK_VENTA_CLIENTE As System.Data.DataRelation
    
    Private relationFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1 As System.Data.DataRelation
    
    Private relationFK_PRODUCTO_LINEA As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("COMPRA")) Is Nothing) Then
                MyBase.Tables.Add(New COMPRADataTable(ds.Tables("COMPRA")))
            End If
            If (Not (ds.Tables("DETALLE_COMPRA")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLE_COMPRADataTable(ds.Tables("DETALLE_COMPRA")))
            End If
            If (Not (ds.Tables("DETALLE_VENTA")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLE_VENTADataTable(ds.Tables("DETALLE_VENTA")))
            End If
            If (Not (ds.Tables("EMPLEADO")) Is Nothing) Then
                MyBase.Tables.Add(New EMPLEADODataTable(ds.Tables("EMPLEADO")))
            End If
            If (Not (ds.Tables("HISTORICO_EMPLEADO")) Is Nothing) Then
                MyBase.Tables.Add(New HISTORICO_EMPLEADODataTable(ds.Tables("HISTORICO_EMPLEADO")))
            End If
            If (Not (ds.Tables("HISTORICO_IMPUESTO")) Is Nothing) Then
                MyBase.Tables.Add(New HISTORICO_IMPUESTODataTable(ds.Tables("HISTORICO_IMPUESTO")))
            End If
            If (Not (ds.Tables("IMPUESTO")) Is Nothing) Then
                MyBase.Tables.Add(New IMPUESTODataTable(ds.Tables("IMPUESTO")))
            End If
            If (Not (ds.Tables("LOTE")) Is Nothing) Then
                MyBase.Tables.Add(New LOTEDataTable(ds.Tables("LOTE")))
            End If
            If (Not (ds.Tables("OTROS_GASTOS")) Is Nothing) Then
                MyBase.Tables.Add(New OTROS_GASTOSDataTable(ds.Tables("OTROS_GASTOS")))
            End If
            If (Not (ds.Tables("PRODUCTO")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTODataTable(ds.Tables("PRODUCTO")))
            End If
            If (Not (ds.Tables("PROVEEDOR")) Is Nothing) Then
                MyBase.Tables.Add(New PROVEEDORDataTable(ds.Tables("PROVEEDOR")))
            End If
            If (Not (ds.Tables("PROVEEDOR_PRODUCTO")) Is Nothing) Then
                MyBase.Tables.Add(New PROVEEDOR_PRODUCTODataTable(ds.Tables("PROVEEDOR_PRODUCTO")))
            End If
            If (Not (ds.Tables("TELEFONO_PROVEEDOR")) Is Nothing) Then
                MyBase.Tables.Add(New TELEFONO_PROVEEDORDataTable(ds.Tables("TELEFONO_PROVEEDOR")))
            End If
            If (Not (ds.Tables("VENTA")) Is Nothing) Then
                MyBase.Tables.Add(New VENTADataTable(ds.Tables("VENTA")))
            End If
            If (Not (ds.Tables("PEDIDO_FRECUENTE")) Is Nothing) Then
                MyBase.Tables.Add(New PEDIDO_FRECUENTEDataTable(ds.Tables("PEDIDO_FRECUENTE")))
            End If
            If (Not (ds.Tables("CLIENTE")) Is Nothing) Then
                MyBase.Tables.Add(New CLIENTEDataTable(ds.Tables("CLIENTE")))
            End If
            If (Not (ds.Tables("LINEA")) Is Nothing) Then
                MyBase.Tables.Add(New LINEADataTable(ds.Tables("LINEA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COMPRA() As COMPRADataTable
        Get
            Return Me.tableCOMPRA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DETALLE_COMPRA() As DETALLE_COMPRADataTable
        Get
            Return Me.tableDETALLE_COMPRA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DETALLE_VENTA() As DETALLE_VENTADataTable
        Get
            Return Me.tableDETALLE_VENTA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EMPLEADO() As EMPLEADODataTable
        Get
            Return Me.tableEMPLEADO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HISTORICO_EMPLEADO() As HISTORICO_EMPLEADODataTable
        Get
            Return Me.tableHISTORICO_EMPLEADO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HISTORICO_IMPUESTO() As HISTORICO_IMPUESTODataTable
        Get
            Return Me.tableHISTORICO_IMPUESTO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMPUESTO() As IMPUESTODataTable
        Get
            Return Me.tableIMPUESTO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOTE() As LOTEDataTable
        Get
            Return Me.tableLOTE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTROS_GASTOS() As OTROS_GASTOSDataTable
        Get
            Return Me.tableOTROS_GASTOS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRODUCTO() As PRODUCTODataTable
        Get
            Return Me.tablePRODUCTO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROVEEDOR() As PROVEEDORDataTable
        Get
            Return Me.tablePROVEEDOR
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROVEEDOR_PRODUCTO() As PROVEEDOR_PRODUCTODataTable
        Get
            Return Me.tablePROVEEDOR_PRODUCTO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TELEFONO_PROVEEDOR() As TELEFONO_PROVEEDORDataTable
        Get
            Return Me.tableTELEFONO_PROVEEDOR
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VENTA() As VENTADataTable
        Get
            Return Me.tableVENTA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PEDIDO_FRECUENTE() As PEDIDO_FRECUENTEDataTable
        Get
            Return Me.tablePEDIDO_FRECUENTE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CLIENTE() As CLIENTEDataTable
        Get
            Return Me.tableCLIENTE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LINEA() As LINEADataTable
        Get
            Return Me.tableLINEA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As FarmaciaSJDataSet = CType(MyBase.Clone,FarmaciaSJDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("COMPRA")) Is Nothing) Then
                MyBase.Tables.Add(New COMPRADataTable(ds.Tables("COMPRA")))
            End If
            If (Not (ds.Tables("DETALLE_COMPRA")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLE_COMPRADataTable(ds.Tables("DETALLE_COMPRA")))
            End If
            If (Not (ds.Tables("DETALLE_VENTA")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLE_VENTADataTable(ds.Tables("DETALLE_VENTA")))
            End If
            If (Not (ds.Tables("EMPLEADO")) Is Nothing) Then
                MyBase.Tables.Add(New EMPLEADODataTable(ds.Tables("EMPLEADO")))
            End If
            If (Not (ds.Tables("HISTORICO_EMPLEADO")) Is Nothing) Then
                MyBase.Tables.Add(New HISTORICO_EMPLEADODataTable(ds.Tables("HISTORICO_EMPLEADO")))
            End If
            If (Not (ds.Tables("HISTORICO_IMPUESTO")) Is Nothing) Then
                MyBase.Tables.Add(New HISTORICO_IMPUESTODataTable(ds.Tables("HISTORICO_IMPUESTO")))
            End If
            If (Not (ds.Tables("IMPUESTO")) Is Nothing) Then
                MyBase.Tables.Add(New IMPUESTODataTable(ds.Tables("IMPUESTO")))
            End If
            If (Not (ds.Tables("LOTE")) Is Nothing) Then
                MyBase.Tables.Add(New LOTEDataTable(ds.Tables("LOTE")))
            End If
            If (Not (ds.Tables("OTROS_GASTOS")) Is Nothing) Then
                MyBase.Tables.Add(New OTROS_GASTOSDataTable(ds.Tables("OTROS_GASTOS")))
            End If
            If (Not (ds.Tables("PRODUCTO")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTODataTable(ds.Tables("PRODUCTO")))
            End If
            If (Not (ds.Tables("PROVEEDOR")) Is Nothing) Then
                MyBase.Tables.Add(New PROVEEDORDataTable(ds.Tables("PROVEEDOR")))
            End If
            If (Not (ds.Tables("PROVEEDOR_PRODUCTO")) Is Nothing) Then
                MyBase.Tables.Add(New PROVEEDOR_PRODUCTODataTable(ds.Tables("PROVEEDOR_PRODUCTO")))
            End If
            If (Not (ds.Tables("TELEFONO_PROVEEDOR")) Is Nothing) Then
                MyBase.Tables.Add(New TELEFONO_PROVEEDORDataTable(ds.Tables("TELEFONO_PROVEEDOR")))
            End If
            If (Not (ds.Tables("VENTA")) Is Nothing) Then
                MyBase.Tables.Add(New VENTADataTable(ds.Tables("VENTA")))
            End If
            If (Not (ds.Tables("PEDIDO_FRECUENTE")) Is Nothing) Then
                MyBase.Tables.Add(New PEDIDO_FRECUENTEDataTable(ds.Tables("PEDIDO_FRECUENTE")))
            End If
            If (Not (ds.Tables("CLIENTE")) Is Nothing) Then
                MyBase.Tables.Add(New CLIENTEDataTable(ds.Tables("CLIENTE")))
            End If
            If (Not (ds.Tables("LINEA")) Is Nothing) Then
                MyBase.Tables.Add(New LINEADataTable(ds.Tables("LINEA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCOMPRA = CType(MyBase.Tables("COMPRA"),COMPRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOMPRA) Is Nothing) Then
                Me.tableCOMPRA.InitVars
            End If
        End If
        Me.tableDETALLE_COMPRA = CType(MyBase.Tables("DETALLE_COMPRA"),DETALLE_COMPRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableDETALLE_COMPRA) Is Nothing) Then
                Me.tableDETALLE_COMPRA.InitVars
            End If
        End If
        Me.tableDETALLE_VENTA = CType(MyBase.Tables("DETALLE_VENTA"),DETALLE_VENTADataTable)
        If (initTable = true) Then
            If (Not (Me.tableDETALLE_VENTA) Is Nothing) Then
                Me.tableDETALLE_VENTA.InitVars
            End If
        End If
        Me.tableEMPLEADO = CType(MyBase.Tables("EMPLEADO"),EMPLEADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableEMPLEADO) Is Nothing) Then
                Me.tableEMPLEADO.InitVars
            End If
        End If
        Me.tableHISTORICO_EMPLEADO = CType(MyBase.Tables("HISTORICO_EMPLEADO"),HISTORICO_EMPLEADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableHISTORICO_EMPLEADO) Is Nothing) Then
                Me.tableHISTORICO_EMPLEADO.InitVars
            End If
        End If
        Me.tableHISTORICO_IMPUESTO = CType(MyBase.Tables("HISTORICO_IMPUESTO"),HISTORICO_IMPUESTODataTable)
        If (initTable = true) Then
            If (Not (Me.tableHISTORICO_IMPUESTO) Is Nothing) Then
                Me.tableHISTORICO_IMPUESTO.InitVars
            End If
        End If
        Me.tableIMPUESTO = CType(MyBase.Tables("IMPUESTO"),IMPUESTODataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMPUESTO) Is Nothing) Then
                Me.tableIMPUESTO.InitVars
            End If
        End If
        Me.tableLOTE = CType(MyBase.Tables("LOTE"),LOTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOTE) Is Nothing) Then
                Me.tableLOTE.InitVars
            End If
        End If
        Me.tableOTROS_GASTOS = CType(MyBase.Tables("OTROS_GASTOS"),OTROS_GASTOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTROS_GASTOS) Is Nothing) Then
                Me.tableOTROS_GASTOS.InitVars
            End If
        End If
        Me.tablePRODUCTO = CType(MyBase.Tables("PRODUCTO"),PRODUCTODataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRODUCTO) Is Nothing) Then
                Me.tablePRODUCTO.InitVars
            End If
        End If
        Me.tablePROVEEDOR = CType(MyBase.Tables("PROVEEDOR"),PROVEEDORDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROVEEDOR) Is Nothing) Then
                Me.tablePROVEEDOR.InitVars
            End If
        End If
        Me.tablePROVEEDOR_PRODUCTO = CType(MyBase.Tables("PROVEEDOR_PRODUCTO"),PROVEEDOR_PRODUCTODataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROVEEDOR_PRODUCTO) Is Nothing) Then
                Me.tablePROVEEDOR_PRODUCTO.InitVars
            End If
        End If
        Me.tableTELEFONO_PROVEEDOR = CType(MyBase.Tables("TELEFONO_PROVEEDOR"),TELEFONO_PROVEEDORDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTELEFONO_PROVEEDOR) Is Nothing) Then
                Me.tableTELEFONO_PROVEEDOR.InitVars
            End If
        End If
        Me.tableVENTA = CType(MyBase.Tables("VENTA"),VENTADataTable)
        If (initTable = true) Then
            If (Not (Me.tableVENTA) Is Nothing) Then
                Me.tableVENTA.InitVars
            End If
        End If
        Me.tablePEDIDO_FRECUENTE = CType(MyBase.Tables("PEDIDO_FRECUENTE"),PEDIDO_FRECUENTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePEDIDO_FRECUENTE) Is Nothing) Then
                Me.tablePEDIDO_FRECUENTE.InitVars
            End If
        End If
        Me.tableCLIENTE = CType(MyBase.Tables("CLIENTE"),CLIENTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCLIENTE) Is Nothing) Then
                Me.tableCLIENTE.InitVars
            End If
        End If
        Me.tableLINEA = CType(MyBase.Tables("LINEA"),LINEADataTable)
        If (initTable = true) Then
            If (Not (Me.tableLINEA) Is Nothing) Then
                Me.tableLINEA.InitVars
            End If
        End If
        Me.relationFK_COMPRA_PROVEEDOR = Me.Relations("FK_COMPRA_PROVEEDOR")
        Me.relationFK_DETALLE_COMPRA_COMPRA = Me.Relations("FK_DETALLE_COMPRA_COMPRA")
        Me.relationFK_DETALLE_COMPRA_PRODUCTO = Me.Relations("FK_DETALLE_COMPRA_PRODUCTO")
        Me.relationFK_DETALLE_VENTA_HISTORICO_IMPUESTO = Me.Relations("FK_DETALLE_VENTA_HISTORICO_IMPUESTO")
        Me.relationFK_DETALLE_VENTA_LOTE = Me.Relations("FK_DETALLE_VENTA_LOTE")
        Me.relationFK_DETALLE_VENTA_VENTA = Me.Relations("FK_DETALLE_VENTA_VENTA")
        Me.relationFK_HISTORICO_EMPLEADO_EMPLEADO = Me.Relations("FK_HISTORICO_EMPLEADO_EMPLEADO")
        Me.relationFK_HISTORICO_IMPUESTO_IMPUESTO = Me.Relations("FK_HISTORICO_IMPUESTO_IMPUESTO")
        Me.relationFK_LOTE_PRODUCTO = Me.Relations("FK_LOTE_PRODUCTO")
        Me.relationFK_PROVEEDOR_PRODUCTO_PRODUCTO = Me.Relations("FK_PROVEEDOR_PRODUCTO_PRODUCTO")
        Me.relationFK_PROVEEDOR_PRODUCTO_PROVEEDOR = Me.Relations("FK_PROVEEDOR_PRODUCTO_PROVEEDOR")
        Me.relationFK_TELEFONO_PROVEEDOR_PROVEEDOR = Me.Relations("FK_TELEFONO_PROVEEDOR_PROVEEDOR")
        Me.relationFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE = Me.Relations("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE")
        Me.relationFK_VENTA_CLIENTE = Me.Relations("FK_VENTA_CLIENTE")
        Me.relationFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1 = Me.Relations("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1")
        Me.relationFK_PRODUCTO_LINEA = Me.Relations("FK_PRODUCTO_LINEA")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "FarmaciaSJDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/FarmaciaSJDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCOMPRA = New COMPRADataTable
        MyBase.Tables.Add(Me.tableCOMPRA)
        Me.tableDETALLE_COMPRA = New DETALLE_COMPRADataTable
        MyBase.Tables.Add(Me.tableDETALLE_COMPRA)
        Me.tableDETALLE_VENTA = New DETALLE_VENTADataTable
        MyBase.Tables.Add(Me.tableDETALLE_VENTA)
        Me.tableEMPLEADO = New EMPLEADODataTable
        MyBase.Tables.Add(Me.tableEMPLEADO)
        Me.tableHISTORICO_EMPLEADO = New HISTORICO_EMPLEADODataTable
        MyBase.Tables.Add(Me.tableHISTORICO_EMPLEADO)
        Me.tableHISTORICO_IMPUESTO = New HISTORICO_IMPUESTODataTable
        MyBase.Tables.Add(Me.tableHISTORICO_IMPUESTO)
        Me.tableIMPUESTO = New IMPUESTODataTable
        MyBase.Tables.Add(Me.tableIMPUESTO)
        Me.tableLOTE = New LOTEDataTable
        MyBase.Tables.Add(Me.tableLOTE)
        Me.tableOTROS_GASTOS = New OTROS_GASTOSDataTable
        MyBase.Tables.Add(Me.tableOTROS_GASTOS)
        Me.tablePRODUCTO = New PRODUCTODataTable
        MyBase.Tables.Add(Me.tablePRODUCTO)
        Me.tablePROVEEDOR = New PROVEEDORDataTable
        MyBase.Tables.Add(Me.tablePROVEEDOR)
        Me.tablePROVEEDOR_PRODUCTO = New PROVEEDOR_PRODUCTODataTable
        MyBase.Tables.Add(Me.tablePROVEEDOR_PRODUCTO)
        Me.tableTELEFONO_PROVEEDOR = New TELEFONO_PROVEEDORDataTable
        MyBase.Tables.Add(Me.tableTELEFONO_PROVEEDOR)
        Me.tableVENTA = New VENTADataTable
        MyBase.Tables.Add(Me.tableVENTA)
        Me.tablePEDIDO_FRECUENTE = New PEDIDO_FRECUENTEDataTable
        MyBase.Tables.Add(Me.tablePEDIDO_FRECUENTE)
        Me.tableCLIENTE = New CLIENTEDataTable
        MyBase.Tables.Add(Me.tableCLIENTE)
        Me.tableLINEA = New LINEADataTable
        MyBase.Tables.Add(Me.tableLINEA)
        Me.relationFK_COMPRA_PROVEEDOR = New System.Data.DataRelation("FK_COMPRA_PROVEEDOR", New System.Data.DataColumn() {Me.tablePROVEEDOR.ID_PROVEEDORColumn}, New System.Data.DataColumn() {Me.tableCOMPRA.ID_PROVEEDORColumn}, false)
        Me.Relations.Add(Me.relationFK_COMPRA_PROVEEDOR)
        Me.relationFK_DETALLE_COMPRA_COMPRA = New System.Data.DataRelation("FK_DETALLE_COMPRA_COMPRA", New System.Data.DataColumn() {Me.tableCOMPRA.ID_COMPRAColumn}, New System.Data.DataColumn() {Me.tableDETALLE_COMPRA.ID_COMPRAColumn}, false)
        Me.Relations.Add(Me.relationFK_DETALLE_COMPRA_COMPRA)
        Me.relationFK_DETALLE_COMPRA_PRODUCTO = New System.Data.DataRelation("FK_DETALLE_COMPRA_PRODUCTO", New System.Data.DataColumn() {Me.tablePRODUCTO.ID_PRODUCTOColumn}, New System.Data.DataColumn() {Me.tableDETALLE_COMPRA.ID_PRODUCTOColumn}, false)
        Me.Relations.Add(Me.relationFK_DETALLE_COMPRA_PRODUCTO)
        Me.relationFK_DETALLE_VENTA_HISTORICO_IMPUESTO = New System.Data.DataRelation("FK_DETALLE_VENTA_HISTORICO_IMPUESTO", New System.Data.DataColumn() {Me.tableHISTORICO_IMPUESTO.ID_HISTORICO_IMPUESTOColumn, Me.tableHISTORICO_IMPUESTO.ID_IMPUESTOColumn}, New System.Data.DataColumn() {Me.tableDETALLE_VENTA.ID_HISTORICO_IMPUESTOColumn, Me.tableDETALLE_VENTA.ID_IMPUESTOColumn}, false)
        Me.Relations.Add(Me.relationFK_DETALLE_VENTA_HISTORICO_IMPUESTO)
        Me.relationFK_DETALLE_VENTA_LOTE = New System.Data.DataRelation("FK_DETALLE_VENTA_LOTE", New System.Data.DataColumn() {Me.tableLOTE.ID_LOTEColumn, Me.tableLOTE.ID_PRODUCTOColumn}, New System.Data.DataColumn() {Me.tableDETALLE_VENTA.ID_LOTEColumn, Me.tableDETALLE_VENTA.ID_PRODUCTOColumn}, false)
        Me.Relations.Add(Me.relationFK_DETALLE_VENTA_LOTE)
        Me.relationFK_DETALLE_VENTA_VENTA = New System.Data.DataRelation("FK_DETALLE_VENTA_VENTA", New System.Data.DataColumn() {Me.tableVENTA.ID_VENTAColumn}, New System.Data.DataColumn() {Me.tableDETALLE_VENTA.ID_VENTAColumn}, false)
        Me.Relations.Add(Me.relationFK_DETALLE_VENTA_VENTA)
        Me.relationFK_HISTORICO_EMPLEADO_EMPLEADO = New System.Data.DataRelation("FK_HISTORICO_EMPLEADO_EMPLEADO", New System.Data.DataColumn() {Me.tableEMPLEADO.ID_EMPLEADOColumn}, New System.Data.DataColumn() {Me.tableHISTORICO_EMPLEADO.ID_EMPLEADOColumn}, false)
        Me.Relations.Add(Me.relationFK_HISTORICO_EMPLEADO_EMPLEADO)
        Me.relationFK_HISTORICO_IMPUESTO_IMPUESTO = New System.Data.DataRelation("FK_HISTORICO_IMPUESTO_IMPUESTO", New System.Data.DataColumn() {Me.tableIMPUESTO.ID_IMPUESTOColumn}, New System.Data.DataColumn() {Me.tableHISTORICO_IMPUESTO.ID_IMPUESTOColumn}, false)
        Me.Relations.Add(Me.relationFK_HISTORICO_IMPUESTO_IMPUESTO)
        Me.relationFK_LOTE_PRODUCTO = New System.Data.DataRelation("FK_LOTE_PRODUCTO", New System.Data.DataColumn() {Me.tablePRODUCTO.ID_PRODUCTOColumn}, New System.Data.DataColumn() {Me.tableLOTE.ID_PRODUCTOColumn}, false)
        Me.Relations.Add(Me.relationFK_LOTE_PRODUCTO)
        Me.relationFK_PROVEEDOR_PRODUCTO_PRODUCTO = New System.Data.DataRelation("FK_PROVEEDOR_PRODUCTO_PRODUCTO", New System.Data.DataColumn() {Me.tablePRODUCTO.ID_PRODUCTOColumn}, New System.Data.DataColumn() {Me.tablePROVEEDOR_PRODUCTO.ID_PRODUCTOColumn}, false)
        Me.Relations.Add(Me.relationFK_PROVEEDOR_PRODUCTO_PRODUCTO)
        Me.relationFK_PROVEEDOR_PRODUCTO_PROVEEDOR = New System.Data.DataRelation("FK_PROVEEDOR_PRODUCTO_PROVEEDOR", New System.Data.DataColumn() {Me.tablePROVEEDOR.ID_PROVEEDORColumn}, New System.Data.DataColumn() {Me.tablePROVEEDOR_PRODUCTO.ID_PROVEEDORColumn}, false)
        Me.Relations.Add(Me.relationFK_PROVEEDOR_PRODUCTO_PROVEEDOR)
        Me.relationFK_TELEFONO_PROVEEDOR_PROVEEDOR = New System.Data.DataRelation("FK_TELEFONO_PROVEEDOR_PROVEEDOR", New System.Data.DataColumn() {Me.tablePROVEEDOR.ID_PROVEEDORColumn}, New System.Data.DataColumn() {Me.tableTELEFONO_PROVEEDOR.ID_PROVEEDORColumn}, false)
        Me.Relations.Add(Me.relationFK_TELEFONO_PROVEEDOR_PROVEEDOR)
        Me.relationFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE = New System.Data.DataRelation("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE", New System.Data.DataColumn() {Me.tablePRODUCTO.ID_PRODUCTOColumn}, New System.Data.DataColumn() {Me.tablePEDIDO_FRECUENTE.ID_PRODUCTOColumn}, false)
        Me.Relations.Add(Me.relationFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE)
        Me.relationFK_VENTA_CLIENTE = New System.Data.DataRelation("FK_VENTA_CLIENTE", New System.Data.DataColumn() {Me.tableCLIENTE.ID_CLIENTEColumn}, New System.Data.DataColumn() {Me.tableVENTA.ID_CLIENTEColumn}, false)
        Me.Relations.Add(Me.relationFK_VENTA_CLIENTE)
        Me.relationFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1 = New System.Data.DataRelation("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1", New System.Data.DataColumn() {Me.tableCLIENTE.ID_CLIENTEColumn}, New System.Data.DataColumn() {Me.tablePEDIDO_FRECUENTE.ID_CLIENTEColumn}, false)
        Me.Relations.Add(Me.relationFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1)
        Me.relationFK_PRODUCTO_LINEA = New System.Data.DataRelation("FK_PRODUCTO_LINEA", New System.Data.DataColumn() {Me.tableLINEA.ID_LINEAColumn}, New System.Data.DataColumn() {Me.tablePRODUCTO.ID_LINEAColumn}, false)
        Me.Relations.Add(Me.relationFK_PRODUCTO_LINEA)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOMPRA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDETALLE_COMPRA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDETALLE_VENTA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEMPLEADO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHISTORICO_EMPLEADO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHISTORICO_IMPUESTO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMPUESTO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLOTE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOTROS_GASTOS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRODUCTO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePROVEEDOR() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePROVEEDOR_PRODUCTO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTELEFONO_PROVEEDOR() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVENTA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePEDIDO_FRECUENTE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCLIENTE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLINEA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub COMPRARowChangeEventHandler(ByVal sender As Object, ByVal e As COMPRARowChangeEvent)
    
    Public Delegate Sub DETALLE_COMPRARowChangeEventHandler(ByVal sender As Object, ByVal e As DETALLE_COMPRARowChangeEvent)
    
    Public Delegate Sub DETALLE_VENTARowChangeEventHandler(ByVal sender As Object, ByVal e As DETALLE_VENTARowChangeEvent)
    
    Public Delegate Sub EMPLEADORowChangeEventHandler(ByVal sender As Object, ByVal e As EMPLEADORowChangeEvent)
    
    Public Delegate Sub HISTORICO_EMPLEADORowChangeEventHandler(ByVal sender As Object, ByVal e As HISTORICO_EMPLEADORowChangeEvent)
    
    Public Delegate Sub HISTORICO_IMPUESTORowChangeEventHandler(ByVal sender As Object, ByVal e As HISTORICO_IMPUESTORowChangeEvent)
    
    Public Delegate Sub IMPUESTORowChangeEventHandler(ByVal sender As Object, ByVal e As IMPUESTORowChangeEvent)
    
    Public Delegate Sub LOTERowChangeEventHandler(ByVal sender As Object, ByVal e As LOTERowChangeEvent)
    
    Public Delegate Sub OTROS_GASTOSRowChangeEventHandler(ByVal sender As Object, ByVal e As OTROS_GASTOSRowChangeEvent)
    
    Public Delegate Sub PRODUCTORowChangeEventHandler(ByVal sender As Object, ByVal e As PRODUCTORowChangeEvent)
    
    Public Delegate Sub PROVEEDORRowChangeEventHandler(ByVal sender As Object, ByVal e As PROVEEDORRowChangeEvent)
    
    Public Delegate Sub PROVEEDOR_PRODUCTORowChangeEventHandler(ByVal sender As Object, ByVal e As PROVEEDOR_PRODUCTORowChangeEvent)
    
    Public Delegate Sub TELEFONO_PROVEEDORRowChangeEventHandler(ByVal sender As Object, ByVal e As TELEFONO_PROVEEDORRowChangeEvent)
    
    Public Delegate Sub VENTARowChangeEventHandler(ByVal sender As Object, ByVal e As VENTARowChangeEvent)
    
    Public Delegate Sub PEDIDO_FRECUENTERowChangeEventHandler(ByVal sender As Object, ByVal e As PEDIDO_FRECUENTERowChangeEvent)
    
    Public Delegate Sub CLIENTERowChangeEventHandler(ByVal sender As Object, ByVal e As CLIENTERowChangeEvent)
    
    Public Delegate Sub LINEARowChangeEventHandler(ByVal sender As Object, ByVal e As LINEARowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COMPRADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_COMPRA As System.Data.DataColumn
        
        Private columnFECHA_COMPRA As System.Data.DataColumn
        
        Private columnVENCE As System.Data.DataColumn
        
        Private columnMONTO As System.Data.DataColumn
        
        Private columnDESCUENTO_GLOBAL As System.Data.DataColumn
        
        Private columnNUMERO_FACTURA_COMPRA As System.Data.DataColumn
        
        Private columnID_PROVEEDOR As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COMPRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_COMPRAColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_COMPRA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPRAColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMPRA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENCEColumn() As System.Data.DataColumn
            Get
                Return Me.columnVENCE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnMONTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCUENTO_GLOBALColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESCUENTO_GLOBAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_FACTURA_COMPRAColumn() As System.Data.DataColumn
            Get
                Return Me.columnNUMERO_FACTURA_COMPRA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PROVEEDORColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PROVEEDOR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COMPRARow
            Get
                Return CType(Me.Rows(index),COMPRARow)
            End Get
        End Property
        
        Public Event COMPRARowChanging As COMPRARowChangeEventHandler
        
        Public Event COMPRARowChanged As COMPRARowChangeEventHandler
        
        Public Event COMPRARowDeleting As COMPRARowChangeEventHandler
        
        Public Event COMPRARowDeleted As COMPRARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOMPRARow(ByVal row As COMPRARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOMPRARow(ByVal FECHA_COMPRA As Date, ByVal VENCE As Date, ByVal MONTO As Double, ByVal DESCUENTO_GLOBAL As Double, ByVal NUMERO_FACTURA_COMPRA As String, ByVal parentPROVEEDORRowByFK_COMPRA_PROVEEDOR As PROVEEDORRow) As COMPRARow
            Dim rowCOMPRARow As COMPRARow = CType(Me.NewRow,COMPRARow)
            rowCOMPRARow.ItemArray = New Object() {Nothing, FECHA_COMPRA, VENCE, MONTO, DESCUENTO_GLOBAL, NUMERO_FACTURA_COMPRA, parentPROVEEDORRowByFK_COMPRA_PROVEEDOR(0)}
            Me.Rows.Add(rowCOMPRARow)
            Return rowCOMPRARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_COMPRA(ByVal ID_COMPRA As Decimal) As COMPRARow
            Return CType(Me.Rows.Find(New Object() {ID_COMPRA}),COMPRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As COMPRADataTable = CType(MyBase.Clone,COMPRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New COMPRADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_COMPRA = MyBase.Columns("ID_COMPRA")
            Me.columnFECHA_COMPRA = MyBase.Columns("FECHA_COMPRA")
            Me.columnVENCE = MyBase.Columns("VENCE")
            Me.columnMONTO = MyBase.Columns("MONTO")
            Me.columnDESCUENTO_GLOBAL = MyBase.Columns("DESCUENTO_GLOBAL")
            Me.columnNUMERO_FACTURA_COMPRA = MyBase.Columns("NUMERO_FACTURA_COMPRA")
            Me.columnID_PROVEEDOR = MyBase.Columns("ID_PROVEEDOR")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_COMPRA = New System.Data.DataColumn("ID_COMPRA", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_COMPRA)
            Me.columnFECHA_COMPRA = New System.Data.DataColumn("FECHA_COMPRA", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMPRA)
            Me.columnVENCE = New System.Data.DataColumn("VENCE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENCE)
            Me.columnMONTO = New System.Data.DataColumn("MONTO", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONTO)
            Me.columnDESCUENTO_GLOBAL = New System.Data.DataColumn("DESCUENTO_GLOBAL", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCUENTO_GLOBAL)
            Me.columnNUMERO_FACTURA_COMPRA = New System.Data.DataColumn("NUMERO_FACTURA_COMPRA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_FACTURA_COMPRA)
            Me.columnID_PROVEEDOR = New System.Data.DataColumn("ID_PROVEEDOR", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PROVEEDOR)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_COMPRA}, true))
            Me.columnID_COMPRA.AutoIncrement = true
            Me.columnID_COMPRA.AllowDBNull = false
            Me.columnID_COMPRA.ReadOnly = true
            Me.columnID_COMPRA.Unique = true
            Me.columnFECHA_COMPRA.AllowDBNull = false
            Me.columnVENCE.AllowDBNull = false
            Me.columnMONTO.AllowDBNull = false
            Me.columnDESCUENTO_GLOBAL.AllowDBNull = false
            Me.columnNUMERO_FACTURA_COMPRA.AllowDBNull = false
            Me.columnNUMERO_FACTURA_COMPRA.MaxLength = 2147483647
            Me.columnID_PROVEEDOR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOMPRARow() As COMPRARow
            Return CType(Me.NewRow,COMPRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New COMPRARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(COMPRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COMPRARowChangedEvent) Is Nothing) Then
                RaiseEvent COMPRARowChanged(Me, New COMPRARowChangeEvent(CType(e.Row,COMPRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COMPRARowChangingEvent) Is Nothing) Then
                RaiseEvent COMPRARowChanging(Me, New COMPRARowChangeEvent(CType(e.Row,COMPRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COMPRARowDeletedEvent) Is Nothing) Then
                RaiseEvent COMPRARowDeleted(Me, New COMPRARowChangeEvent(CType(e.Row,COMPRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COMPRARowDeletingEvent) Is Nothing) Then
                RaiseEvent COMPRARowDeleting(Me, New COMPRARowChangeEvent(CType(e.Row,COMPRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOMPRARow(ByVal row As COMPRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COMPRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DETALLE_COMPRADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_DETALLE_COMPRA As System.Data.DataColumn
        
        Private columnID_COMPRA As System.Data.DataColumn
        
        Private columnCANTIDAD As System.Data.DataColumn
        
        Private columnCOSTO_TOTAL As System.Data.DataColumn
        
        Private columnID_PRODUCTO As System.Data.DataColumn
        
        Private columnCOSTO_UNIDAD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DETALLE_COMPRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_DETALLE_COMPRAColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_DETALLE_COMPRA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_COMPRAColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_COMPRA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTO_TOTALColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSTO_TOTAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PRODUCTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PRODUCTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTO_UNIDADColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSTO_UNIDAD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DETALLE_COMPRARow
            Get
                Return CType(Me.Rows(index),DETALLE_COMPRARow)
            End Get
        End Property
        
        Public Event DETALLE_COMPRARowChanging As DETALLE_COMPRARowChangeEventHandler
        
        Public Event DETALLE_COMPRARowChanged As DETALLE_COMPRARowChangeEventHandler
        
        Public Event DETALLE_COMPRARowDeleting As DETALLE_COMPRARowChangeEventHandler
        
        Public Event DETALLE_COMPRARowDeleted As DETALLE_COMPRARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDETALLE_COMPRARow(ByVal row As DETALLE_COMPRARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDETALLE_COMPRARow(ByVal ID_DETALLE_COMPRA As Decimal, ByVal parentCOMPRARowByFK_DETALLE_COMPRA_COMPRA As COMPRARow, ByVal CANTIDAD As Decimal, ByVal COSTO_TOTAL As Decimal, ByVal parentPRODUCTORowByFK_DETALLE_COMPRA_PRODUCTO As PRODUCTORow, ByVal COSTO_UNIDAD As Decimal) As DETALLE_COMPRARow
            Dim rowDETALLE_COMPRARow As DETALLE_COMPRARow = CType(Me.NewRow,DETALLE_COMPRARow)
            rowDETALLE_COMPRARow.ItemArray = New Object() {ID_DETALLE_COMPRA, parentCOMPRARowByFK_DETALLE_COMPRA_COMPRA(0), CANTIDAD, COSTO_TOTAL, parentPRODUCTORowByFK_DETALLE_COMPRA_PRODUCTO(0), COSTO_UNIDAD}
            Me.Rows.Add(rowDETALLE_COMPRARow)
            Return rowDETALLE_COMPRARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_DETALLE_COMPRAID_COMPRA(ByVal ID_DETALLE_COMPRA As Decimal, ByVal ID_COMPRA As Decimal) As DETALLE_COMPRARow
            Return CType(Me.Rows.Find(New Object() {ID_DETALLE_COMPRA, ID_COMPRA}),DETALLE_COMPRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DETALLE_COMPRADataTable = CType(MyBase.Clone,DETALLE_COMPRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DETALLE_COMPRADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_DETALLE_COMPRA = MyBase.Columns("ID_DETALLE_COMPRA")
            Me.columnID_COMPRA = MyBase.Columns("ID_COMPRA")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnCOSTO_TOTAL = MyBase.Columns("COSTO_TOTAL")
            Me.columnID_PRODUCTO = MyBase.Columns("ID_PRODUCTO")
            Me.columnCOSTO_UNIDAD = MyBase.Columns("COSTO_UNIDAD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_DETALLE_COMPRA = New System.Data.DataColumn("ID_DETALLE_COMPRA", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_DETALLE_COMPRA)
            Me.columnID_COMPRA = New System.Data.DataColumn("ID_COMPRA", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_COMPRA)
            Me.columnCANTIDAD = New System.Data.DataColumn("CANTIDAD", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnCOSTO_TOTAL = New System.Data.DataColumn("COSTO_TOTAL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTO_TOTAL)
            Me.columnID_PRODUCTO = New System.Data.DataColumn("ID_PRODUCTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PRODUCTO)
            Me.columnCOSTO_UNIDAD = New System.Data.DataColumn("COSTO_UNIDAD", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTO_UNIDAD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_DETALLE_COMPRA, Me.columnID_COMPRA}, true))
            Me.columnID_DETALLE_COMPRA.AllowDBNull = false
            Me.columnID_COMPRA.AllowDBNull = false
            Me.columnCANTIDAD.AllowDBNull = false
            Me.columnCOSTO_TOTAL.AllowDBNull = false
            Me.columnID_PRODUCTO.AllowDBNull = false
            Me.columnCOSTO_UNIDAD.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDETALLE_COMPRARow() As DETALLE_COMPRARow
            Return CType(Me.NewRow,DETALLE_COMPRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DETALLE_COMPRARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DETALLE_COMPRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DETALLE_COMPRARowChangedEvent) Is Nothing) Then
                RaiseEvent DETALLE_COMPRARowChanged(Me, New DETALLE_COMPRARowChangeEvent(CType(e.Row,DETALLE_COMPRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DETALLE_COMPRARowChangingEvent) Is Nothing) Then
                RaiseEvent DETALLE_COMPRARowChanging(Me, New DETALLE_COMPRARowChangeEvent(CType(e.Row,DETALLE_COMPRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DETALLE_COMPRARowDeletedEvent) Is Nothing) Then
                RaiseEvent DETALLE_COMPRARowDeleted(Me, New DETALLE_COMPRARowChangeEvent(CType(e.Row,DETALLE_COMPRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DETALLE_COMPRARowDeletingEvent) Is Nothing) Then
                RaiseEvent DETALLE_COMPRARowDeleting(Me, New DETALLE_COMPRARowChangeEvent(CType(e.Row,DETALLE_COMPRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDETALLE_COMPRARow(ByVal row As DETALLE_COMPRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DETALLE_COMPRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DETALLE_VENTADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_DETALLE_VENTA As System.Data.DataColumn
        
        Private columnID_VENTA As System.Data.DataColumn
        
        Private columnCantidad As System.Data.DataColumn
        
        Private columnID_LOTE As System.Data.DataColumn
        
        Private columnID_IMPUESTO As System.Data.DataColumn
        
        Private columnID_HISTORICO_IMPUESTO As System.Data.DataColumn
        
        Private columnID_PRODUCTO As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DETALLE_VENTA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_DETALLE_VENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_DETALLE_VENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_VENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_VENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_LOTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_LOTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_IMPUESTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_IMPUESTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_HISTORICO_IMPUESTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_HISTORICO_IMPUESTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PRODUCTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PRODUCTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DETALLE_VENTARow
            Get
                Return CType(Me.Rows(index),DETALLE_VENTARow)
            End Get
        End Property
        
        Public Event DETALLE_VENTARowChanging As DETALLE_VENTARowChangeEventHandler
        
        Public Event DETALLE_VENTARowChanged As DETALLE_VENTARowChangeEventHandler
        
        Public Event DETALLE_VENTARowDeleting As DETALLE_VENTARowChangeEventHandler
        
        Public Event DETALLE_VENTARowDeleted As DETALLE_VENTARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDETALLE_VENTARow(ByVal row As DETALLE_VENTARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDETALLE_VENTARow(ByVal ID_DETALLE_VENTA As Decimal, ByVal parentVENTARowByFK_DETALLE_VENTA_VENTA As VENTARow, ByVal Cantidad As Decimal, ByVal ID_LOTE As Decimal, ByVal ID_IMPUESTO As Decimal, ByVal ID_HISTORICO_IMPUESTO As Decimal, ByVal ID_PRODUCTO As Decimal) As DETALLE_VENTARow
            Dim rowDETALLE_VENTARow As DETALLE_VENTARow = CType(Me.NewRow,DETALLE_VENTARow)
            rowDETALLE_VENTARow.ItemArray = New Object() {ID_DETALLE_VENTA, parentVENTARowByFK_DETALLE_VENTA_VENTA(0), Cantidad, ID_LOTE, ID_IMPUESTO, ID_HISTORICO_IMPUESTO, ID_PRODUCTO}
            Me.Rows.Add(rowDETALLE_VENTARow)
            Return rowDETALLE_VENTARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_DETALLE_VENTAID_VENTA(ByVal ID_DETALLE_VENTA As Decimal, ByVal ID_VENTA As Decimal) As DETALLE_VENTARow
            Return CType(Me.Rows.Find(New Object() {ID_DETALLE_VENTA, ID_VENTA}),DETALLE_VENTARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DETALLE_VENTADataTable = CType(MyBase.Clone,DETALLE_VENTADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DETALLE_VENTADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_DETALLE_VENTA = MyBase.Columns("ID_DETALLE_VENTA")
            Me.columnID_VENTA = MyBase.Columns("ID_VENTA")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnID_LOTE = MyBase.Columns("ID_LOTE")
            Me.columnID_IMPUESTO = MyBase.Columns("ID_IMPUESTO")
            Me.columnID_HISTORICO_IMPUESTO = MyBase.Columns("ID_HISTORICO_IMPUESTO")
            Me.columnID_PRODUCTO = MyBase.Columns("ID_PRODUCTO")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_DETALLE_VENTA = New System.Data.DataColumn("ID_DETALLE_VENTA", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_DETALLE_VENTA)
            Me.columnID_VENTA = New System.Data.DataColumn("ID_VENTA", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_VENTA)
            Me.columnCantidad = New System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnID_LOTE = New System.Data.DataColumn("ID_LOTE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_LOTE)
            Me.columnID_IMPUESTO = New System.Data.DataColumn("ID_IMPUESTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_IMPUESTO)
            Me.columnID_HISTORICO_IMPUESTO = New System.Data.DataColumn("ID_HISTORICO_IMPUESTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_HISTORICO_IMPUESTO)
            Me.columnID_PRODUCTO = New System.Data.DataColumn("ID_PRODUCTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PRODUCTO)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_DETALLE_VENTA, Me.columnID_VENTA}, true))
            Me.columnID_DETALLE_VENTA.AllowDBNull = false
            Me.columnID_VENTA.AllowDBNull = false
            Me.columnCantidad.AllowDBNull = false
            Me.columnID_LOTE.AllowDBNull = false
            Me.columnID_PRODUCTO.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDETALLE_VENTARow() As DETALLE_VENTARow
            Return CType(Me.NewRow,DETALLE_VENTARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DETALLE_VENTARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DETALLE_VENTARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DETALLE_VENTARowChangedEvent) Is Nothing) Then
                RaiseEvent DETALLE_VENTARowChanged(Me, New DETALLE_VENTARowChangeEvent(CType(e.Row,DETALLE_VENTARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DETALLE_VENTARowChangingEvent) Is Nothing) Then
                RaiseEvent DETALLE_VENTARowChanging(Me, New DETALLE_VENTARowChangeEvent(CType(e.Row,DETALLE_VENTARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DETALLE_VENTARowDeletedEvent) Is Nothing) Then
                RaiseEvent DETALLE_VENTARowDeleted(Me, New DETALLE_VENTARowChangeEvent(CType(e.Row,DETALLE_VENTARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DETALLE_VENTARowDeletingEvent) Is Nothing) Then
                RaiseEvent DETALLE_VENTARowDeleting(Me, New DETALLE_VENTARowChangeEvent(CType(e.Row,DETALLE_VENTARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDETALLE_VENTARow(ByVal row As DETALLE_VENTARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DETALLE_VENTADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EMPLEADODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_EMPLEADO As System.Data.DataColumn
        
        Private columnNOMBRE As System.Data.DataColumn
        
        Private columnAPELLIDO As System.Data.DataColumn
        
        Private columnTIPO_IDENTIDAD As System.Data.DataColumn
        
        Private _columnRIF_CI As System.Data.DataColumn
        
        Private columnTELEFONO As System.Data.DataColumn
        
        Private columnMAIL As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EMPLEADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_EMPLEADOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_EMPLEADO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APELLIDOColumn() As System.Data.DataColumn
            Get
                Return Me.columnAPELLIDO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_IDENTIDADColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_IDENTIDAD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _RIF_CIColumn() As System.Data.DataColumn
            Get
                Return Me._columnRIF_CI
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TELEFONOColumn() As System.Data.DataColumn
            Get
                Return Me.columnTELEFONO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAILColumn() As System.Data.DataColumn
            Get
                Return Me.columnMAIL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EMPLEADORow
            Get
                Return CType(Me.Rows(index),EMPLEADORow)
            End Get
        End Property
        
        Public Event EMPLEADORowChanging As EMPLEADORowChangeEventHandler
        
        Public Event EMPLEADORowChanged As EMPLEADORowChangeEventHandler
        
        Public Event EMPLEADORowDeleting As EMPLEADORowChangeEventHandler
        
        Public Event EMPLEADORowDeleted As EMPLEADORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEMPLEADORow(ByVal row As EMPLEADORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEMPLEADORow(ByVal ID_EMPLEADO As Decimal, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal TIPO_IDENTIDAD As String, ByVal _RIF_CI As String, ByVal TELEFONO As String, ByVal MAIL As String) As EMPLEADORow
            Dim rowEMPLEADORow As EMPLEADORow = CType(Me.NewRow,EMPLEADORow)
            rowEMPLEADORow.ItemArray = New Object() {ID_EMPLEADO, NOMBRE, APELLIDO, TIPO_IDENTIDAD, _RIF_CI, TELEFONO, MAIL}
            Me.Rows.Add(rowEMPLEADORow)
            Return rowEMPLEADORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_EMPLEADO(ByVal ID_EMPLEADO As Decimal) As EMPLEADORow
            Return CType(Me.Rows.Find(New Object() {ID_EMPLEADO}),EMPLEADORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As EMPLEADODataTable = CType(MyBase.Clone,EMPLEADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New EMPLEADODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_EMPLEADO = MyBase.Columns("ID_EMPLEADO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnAPELLIDO = MyBase.Columns("APELLIDO")
            Me.columnTIPO_IDENTIDAD = MyBase.Columns("TIPO_IDENTIDAD")
            Me._columnRIF_CI = MyBase.Columns("RIF/CI")
            Me.columnTELEFONO = MyBase.Columns("TELEFONO")
            Me.columnMAIL = MyBase.Columns("MAIL")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_EMPLEADO = New System.Data.DataColumn("ID_EMPLEADO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EMPLEADO)
            Me.columnNOMBRE = New System.Data.DataColumn("NOMBRE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnAPELLIDO = New System.Data.DataColumn("APELLIDO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPELLIDO)
            Me.columnTIPO_IDENTIDAD = New System.Data.DataColumn("TIPO_IDENTIDAD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_IDENTIDAD)
            Me._columnRIF_CI = New System.Data.DataColumn("RIF/CI", GetType(String), Nothing, System.Data.MappingType.Element)
            Me._columnRIF_CI.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_RIF_CI")
            Me._columnRIF_CI.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_RIF_CIColumn")
            Me._columnRIF_CI.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnRIF_CI")
            Me._columnRIF_CI.ExtendedProperties.Add("Generator_UserColumnName", "RIF/CI")
            MyBase.Columns.Add(Me._columnRIF_CI)
            Me.columnTELEFONO = New System.Data.DataColumn("TELEFONO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONO)
            Me.columnMAIL = New System.Data.DataColumn("MAIL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAIL)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_EMPLEADO}, true))
            Me.columnID_EMPLEADO.AllowDBNull = false
            Me.columnID_EMPLEADO.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 2147483647
            Me.columnAPELLIDO.AllowDBNull = false
            Me.columnAPELLIDO.MaxLength = 2147483647
            Me.columnTIPO_IDENTIDAD.AllowDBNull = false
            Me.columnTIPO_IDENTIDAD.MaxLength = 2147483647
            Me._columnRIF_CI.AllowDBNull = false
            Me._columnRIF_CI.MaxLength = 2147483647
            Me.columnTELEFONO.AllowDBNull = false
            Me.columnTELEFONO.MaxLength = 2147483647
            Me.columnMAIL.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEMPLEADORow() As EMPLEADORow
            Return CType(Me.NewRow,EMPLEADORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New EMPLEADORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EMPLEADORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EMPLEADORowChangedEvent) Is Nothing) Then
                RaiseEvent EMPLEADORowChanged(Me, New EMPLEADORowChangeEvent(CType(e.Row,EMPLEADORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EMPLEADORowChangingEvent) Is Nothing) Then
                RaiseEvent EMPLEADORowChanging(Me, New EMPLEADORowChangeEvent(CType(e.Row,EMPLEADORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EMPLEADORowDeletedEvent) Is Nothing) Then
                RaiseEvent EMPLEADORowDeleted(Me, New EMPLEADORowChangeEvent(CType(e.Row,EMPLEADORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EMPLEADORowDeletingEvent) Is Nothing) Then
                RaiseEvent EMPLEADORowDeleting(Me, New EMPLEADORowChangeEvent(CType(e.Row,EMPLEADORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEMPLEADORow(ByVal row As EMPLEADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EMPLEADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HISTORICO_EMPLEADODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_HISTORICO_EMPLEADO As System.Data.DataColumn
        
        Private columnID_EMPLEADO As System.Data.DataColumn
        
        Private columnCARGO As System.Data.DataColumn
        
        Private columnSUELDO As System.Data.DataColumn
        
        Private columnFECHA_INGRESO As System.Data.DataColumn
        
        Private columnFECHA_FIN As System.Data.DataColumn
        
        Private columnJUSTIFICACION As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HISTORICO_EMPLEADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_HISTORICO_EMPLEADOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_HISTORICO_EMPLEADO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_EMPLEADOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_EMPLEADO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARGOColumn() As System.Data.DataColumn
            Get
                Return Me.columnCARGO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUELDOColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUELDO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_INGRESOColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_INGRESO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_FINColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_FIN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JUSTIFICACIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnJUSTIFICACION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HISTORICO_EMPLEADORow
            Get
                Return CType(Me.Rows(index),HISTORICO_EMPLEADORow)
            End Get
        End Property
        
        Public Event HISTORICO_EMPLEADORowChanging As HISTORICO_EMPLEADORowChangeEventHandler
        
        Public Event HISTORICO_EMPLEADORowChanged As HISTORICO_EMPLEADORowChangeEventHandler
        
        Public Event HISTORICO_EMPLEADORowDeleting As HISTORICO_EMPLEADORowChangeEventHandler
        
        Public Event HISTORICO_EMPLEADORowDeleted As HISTORICO_EMPLEADORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHISTORICO_EMPLEADORow(ByVal row As HISTORICO_EMPLEADORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHISTORICO_EMPLEADORow(ByVal ID_HISTORICO_EMPLEADO As Decimal, ByVal parentEMPLEADORowByFK_HISTORICO_EMPLEADO_EMPLEADO As EMPLEADORow, ByVal CARGO As String, ByVal SUELDO As Double, ByVal FECHA_INGRESO As Date, ByVal FECHA_FIN As Date, ByVal JUSTIFICACION As String) As HISTORICO_EMPLEADORow
            Dim rowHISTORICO_EMPLEADORow As HISTORICO_EMPLEADORow = CType(Me.NewRow,HISTORICO_EMPLEADORow)
            rowHISTORICO_EMPLEADORow.ItemArray = New Object() {ID_HISTORICO_EMPLEADO, parentEMPLEADORowByFK_HISTORICO_EMPLEADO_EMPLEADO(0), CARGO, SUELDO, FECHA_INGRESO, FECHA_FIN, JUSTIFICACION}
            Me.Rows.Add(rowHISTORICO_EMPLEADORow)
            Return rowHISTORICO_EMPLEADORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_HISTORICO_EMPLEADOID_EMPLEADO(ByVal ID_HISTORICO_EMPLEADO As Decimal, ByVal ID_EMPLEADO As Decimal) As HISTORICO_EMPLEADORow
            Return CType(Me.Rows.Find(New Object() {ID_HISTORICO_EMPLEADO, ID_EMPLEADO}),HISTORICO_EMPLEADORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As HISTORICO_EMPLEADODataTable = CType(MyBase.Clone,HISTORICO_EMPLEADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New HISTORICO_EMPLEADODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_HISTORICO_EMPLEADO = MyBase.Columns("ID_HISTORICO_EMPLEADO")
            Me.columnID_EMPLEADO = MyBase.Columns("ID_EMPLEADO")
            Me.columnCARGO = MyBase.Columns("CARGO")
            Me.columnSUELDO = MyBase.Columns("SUELDO")
            Me.columnFECHA_INGRESO = MyBase.Columns("FECHA_INGRESO")
            Me.columnFECHA_FIN = MyBase.Columns("FECHA_FIN")
            Me.columnJUSTIFICACION = MyBase.Columns("JUSTIFICACION")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_HISTORICO_EMPLEADO = New System.Data.DataColumn("ID_HISTORICO_EMPLEADO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_HISTORICO_EMPLEADO)
            Me.columnID_EMPLEADO = New System.Data.DataColumn("ID_EMPLEADO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_EMPLEADO)
            Me.columnCARGO = New System.Data.DataColumn("CARGO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARGO)
            Me.columnSUELDO = New System.Data.DataColumn("SUELDO", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUELDO)
            Me.columnFECHA_INGRESO = New System.Data.DataColumn("FECHA_INGRESO", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_INGRESO)
            Me.columnFECHA_FIN = New System.Data.DataColumn("FECHA_FIN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_FIN)
            Me.columnJUSTIFICACION = New System.Data.DataColumn("JUSTIFICACION", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJUSTIFICACION)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_HISTORICO_EMPLEADO, Me.columnID_EMPLEADO}, true))
            Me.columnID_HISTORICO_EMPLEADO.AllowDBNull = false
            Me.columnID_EMPLEADO.AllowDBNull = false
            Me.columnCARGO.AllowDBNull = false
            Me.columnCARGO.MaxLength = 2147483647
            Me.columnSUELDO.AllowDBNull = false
            Me.columnFECHA_INGRESO.AllowDBNull = false
            Me.columnJUSTIFICACION.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHISTORICO_EMPLEADORow() As HISTORICO_EMPLEADORow
            Return CType(Me.NewRow,HISTORICO_EMPLEADORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New HISTORICO_EMPLEADORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HISTORICO_EMPLEADORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HISTORICO_EMPLEADORowChangedEvent) Is Nothing) Then
                RaiseEvent HISTORICO_EMPLEADORowChanged(Me, New HISTORICO_EMPLEADORowChangeEvent(CType(e.Row,HISTORICO_EMPLEADORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HISTORICO_EMPLEADORowChangingEvent) Is Nothing) Then
                RaiseEvent HISTORICO_EMPLEADORowChanging(Me, New HISTORICO_EMPLEADORowChangeEvent(CType(e.Row,HISTORICO_EMPLEADORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HISTORICO_EMPLEADORowDeletedEvent) Is Nothing) Then
                RaiseEvent HISTORICO_EMPLEADORowDeleted(Me, New HISTORICO_EMPLEADORowChangeEvent(CType(e.Row,HISTORICO_EMPLEADORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HISTORICO_EMPLEADORowDeletingEvent) Is Nothing) Then
                RaiseEvent HISTORICO_EMPLEADORowDeleting(Me, New HISTORICO_EMPLEADORowChangeEvent(CType(e.Row,HISTORICO_EMPLEADORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHISTORICO_EMPLEADORow(ByVal row As HISTORICO_EMPLEADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HISTORICO_EMPLEADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HISTORICO_IMPUESTODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_HISTORICO_IMPUESTO As System.Data.DataColumn
        
        Private columnID_IMPUESTO As System.Data.DataColumn
        
        Private columnFECHA_INICIO As System.Data.DataColumn
        
        Private columnFECHA_FIN As System.Data.DataColumn
        
        Private columnVALOR As System.Data.DataColumn
        
        Private columnDESCRIPCION As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HISTORICO_IMPUESTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_HISTORICO_IMPUESTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_HISTORICO_IMPUESTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_IMPUESTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_IMPUESTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_INICIOColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_INICIO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_FINColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_FIN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALORColumn() As System.Data.DataColumn
            Get
                Return Me.columnVALOR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HISTORICO_IMPUESTORow
            Get
                Return CType(Me.Rows(index),HISTORICO_IMPUESTORow)
            End Get
        End Property
        
        Public Event HISTORICO_IMPUESTORowChanging As HISTORICO_IMPUESTORowChangeEventHandler
        
        Public Event HISTORICO_IMPUESTORowChanged As HISTORICO_IMPUESTORowChangeEventHandler
        
        Public Event HISTORICO_IMPUESTORowDeleting As HISTORICO_IMPUESTORowChangeEventHandler
        
        Public Event HISTORICO_IMPUESTORowDeleted As HISTORICO_IMPUESTORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHISTORICO_IMPUESTORow(ByVal row As HISTORICO_IMPUESTORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHISTORICO_IMPUESTORow(ByVal parentIMPUESTORowByFK_HISTORICO_IMPUESTO_IMPUESTO As IMPUESTORow, ByVal FECHA_INICIO As Date, ByVal FECHA_FIN As Date, ByVal VALOR As Double, ByVal DESCRIPCION As String) As HISTORICO_IMPUESTORow
            Dim rowHISTORICO_IMPUESTORow As HISTORICO_IMPUESTORow = CType(Me.NewRow,HISTORICO_IMPUESTORow)
            rowHISTORICO_IMPUESTORow.ItemArray = New Object() {Nothing, parentIMPUESTORowByFK_HISTORICO_IMPUESTO_IMPUESTO(0), FECHA_INICIO, FECHA_FIN, VALOR, DESCRIPCION}
            Me.Rows.Add(rowHISTORICO_IMPUESTORow)
            Return rowHISTORICO_IMPUESTORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_HISTORICO_IMPUESTOID_IMPUESTO(ByVal ID_HISTORICO_IMPUESTO As Decimal, ByVal ID_IMPUESTO As Decimal) As HISTORICO_IMPUESTORow
            Return CType(Me.Rows.Find(New Object() {ID_HISTORICO_IMPUESTO, ID_IMPUESTO}),HISTORICO_IMPUESTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As HISTORICO_IMPUESTODataTable = CType(MyBase.Clone,HISTORICO_IMPUESTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New HISTORICO_IMPUESTODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_HISTORICO_IMPUESTO = MyBase.Columns("ID_HISTORICO_IMPUESTO")
            Me.columnID_IMPUESTO = MyBase.Columns("ID_IMPUESTO")
            Me.columnFECHA_INICIO = MyBase.Columns("FECHA_INICIO")
            Me.columnFECHA_FIN = MyBase.Columns("FECHA_FIN")
            Me.columnVALOR = MyBase.Columns("VALOR")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_HISTORICO_IMPUESTO = New System.Data.DataColumn("ID_HISTORICO_IMPUESTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_HISTORICO_IMPUESTO)
            Me.columnID_IMPUESTO = New System.Data.DataColumn("ID_IMPUESTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_IMPUESTO)
            Me.columnFECHA_INICIO = New System.Data.DataColumn("FECHA_INICIO", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_INICIO)
            Me.columnFECHA_FIN = New System.Data.DataColumn("FECHA_FIN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_FIN)
            Me.columnVALOR = New System.Data.DataColumn("VALOR", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALOR)
            Me.columnDESCRIPCION = New System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_HISTORICO_IMPUESTO, Me.columnID_IMPUESTO}, true))
            Me.columnID_HISTORICO_IMPUESTO.AutoIncrement = true
            Me.columnID_HISTORICO_IMPUESTO.AllowDBNull = false
            Me.columnID_HISTORICO_IMPUESTO.ReadOnly = true
            Me.columnID_IMPUESTO.AllowDBNull = false
            Me.columnFECHA_INICIO.AllowDBNull = false
            Me.columnVALOR.AllowDBNull = false
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHISTORICO_IMPUESTORow() As HISTORICO_IMPUESTORow
            Return CType(Me.NewRow,HISTORICO_IMPUESTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New HISTORICO_IMPUESTORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HISTORICO_IMPUESTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HISTORICO_IMPUESTORowChangedEvent) Is Nothing) Then
                RaiseEvent HISTORICO_IMPUESTORowChanged(Me, New HISTORICO_IMPUESTORowChangeEvent(CType(e.Row,HISTORICO_IMPUESTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HISTORICO_IMPUESTORowChangingEvent) Is Nothing) Then
                RaiseEvent HISTORICO_IMPUESTORowChanging(Me, New HISTORICO_IMPUESTORowChangeEvent(CType(e.Row,HISTORICO_IMPUESTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HISTORICO_IMPUESTORowDeletedEvent) Is Nothing) Then
                RaiseEvent HISTORICO_IMPUESTORowDeleted(Me, New HISTORICO_IMPUESTORowChangeEvent(CType(e.Row,HISTORICO_IMPUESTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HISTORICO_IMPUESTORowDeletingEvent) Is Nothing) Then
                RaiseEvent HISTORICO_IMPUESTORowDeleting(Me, New HISTORICO_IMPUESTORowChangeEvent(CType(e.Row,HISTORICO_IMPUESTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHISTORICO_IMPUESTORow(ByVal row As HISTORICO_IMPUESTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HISTORICO_IMPUESTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMPUESTODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_IMPUESTO As System.Data.DataColumn
        
        Private columnNombre As System.Data.DataColumn
        
        Private columnDescripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMPUESTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_IMPUESTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_IMPUESTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMPUESTORow
            Get
                Return CType(Me.Rows(index),IMPUESTORow)
            End Get
        End Property
        
        Public Event IMPUESTORowChanging As IMPUESTORowChangeEventHandler
        
        Public Event IMPUESTORowChanged As IMPUESTORowChangeEventHandler
        
        Public Event IMPUESTORowDeleting As IMPUESTORowChangeEventHandler
        
        Public Event IMPUESTORowDeleted As IMPUESTORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMPUESTORow(ByVal row As IMPUESTORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMPUESTORow(ByVal Nombre As Date, ByVal Descripcion As String) As IMPUESTORow
            Dim rowIMPUESTORow As IMPUESTORow = CType(Me.NewRow,IMPUESTORow)
            rowIMPUESTORow.ItemArray = New Object() {Nothing, Nombre, Descripcion}
            Me.Rows.Add(rowIMPUESTORow)
            Return rowIMPUESTORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_IMPUESTO(ByVal ID_IMPUESTO As Decimal) As IMPUESTORow
            Return CType(Me.Rows.Find(New Object() {ID_IMPUESTO}),IMPUESTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As IMPUESTODataTable = CType(MyBase.Clone,IMPUESTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New IMPUESTODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_IMPUESTO = MyBase.Columns("ID_IMPUESTO")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_IMPUESTO = New System.Data.DataColumn("ID_IMPUESTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_IMPUESTO)
            Me.columnNombre = New System.Data.DataColumn("Nombre", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnDescripcion = New System.Data.DataColumn("Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_IMPUESTO}, true))
            Me.columnID_IMPUESTO.AutoIncrement = true
            Me.columnID_IMPUESTO.AllowDBNull = false
            Me.columnID_IMPUESTO.ReadOnly = true
            Me.columnID_IMPUESTO.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnDescripcion.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMPUESTORow() As IMPUESTORow
            Return CType(Me.NewRow,IMPUESTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New IMPUESTORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IMPUESTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMPUESTORowChangedEvent) Is Nothing) Then
                RaiseEvent IMPUESTORowChanged(Me, New IMPUESTORowChangeEvent(CType(e.Row,IMPUESTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMPUESTORowChangingEvent) Is Nothing) Then
                RaiseEvent IMPUESTORowChanging(Me, New IMPUESTORowChangeEvent(CType(e.Row,IMPUESTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMPUESTORowDeletedEvent) Is Nothing) Then
                RaiseEvent IMPUESTORowDeleted(Me, New IMPUESTORowChangeEvent(CType(e.Row,IMPUESTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMPUESTORowDeletingEvent) Is Nothing) Then
                RaiseEvent IMPUESTORowDeleting(Me, New IMPUESTORowChangeEvent(CType(e.Row,IMPUESTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMPUESTORow(ByVal row As IMPUESTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMPUESTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOTEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_LOTE As System.Data.DataColumn
        
        Private columnCANTIDAD As System.Data.DataColumn
        
        Private columnFECHA_VENCIMIENTO As System.Data.DataColumn
        
        Private columnPVP As System.Data.DataColumn
        
        Private columnDESCUENTO As System.Data.DataColumn
        
        Private columnID_PRODUCTO As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_LOTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_LOTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENCIMIENTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_VENCIMIENTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PVPColumn() As System.Data.DataColumn
            Get
                Return Me.columnPVP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCUENTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESCUENTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PRODUCTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PRODUCTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOTERow
            Get
                Return CType(Me.Rows(index),LOTERow)
            End Get
        End Property
        
        Public Event LOTERowChanging As LOTERowChangeEventHandler
        
        Public Event LOTERowChanged As LOTERowChangeEventHandler
        
        Public Event LOTERowDeleting As LOTERowChangeEventHandler
        
        Public Event LOTERowDeleted As LOTERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLOTERow(ByVal row As LOTERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLOTERow(ByVal CANTIDAD As Decimal, ByVal FECHA_VENCIMIENTO As Date, ByVal PVP As Double, ByVal DESCUENTO As Double, ByVal parentPRODUCTORowByFK_LOTE_PRODUCTO As PRODUCTORow) As LOTERow
            Dim rowLOTERow As LOTERow = CType(Me.NewRow,LOTERow)
            rowLOTERow.ItemArray = New Object() {Nothing, CANTIDAD, FECHA_VENCIMIENTO, PVP, DESCUENTO, parentPRODUCTORowByFK_LOTE_PRODUCTO(0)}
            Me.Rows.Add(rowLOTERow)
            Return rowLOTERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_LOTEID_PRODUCTO(ByVal ID_LOTE As Decimal, ByVal ID_PRODUCTO As Decimal) As LOTERow
            Return CType(Me.Rows.Find(New Object() {ID_LOTE, ID_PRODUCTO}),LOTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As LOTEDataTable = CType(MyBase.Clone,LOTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New LOTEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_LOTE = MyBase.Columns("ID_LOTE")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnFECHA_VENCIMIENTO = MyBase.Columns("FECHA_VENCIMIENTO")
            Me.columnPVP = MyBase.Columns("PVP")
            Me.columnDESCUENTO = MyBase.Columns("DESCUENTO")
            Me.columnID_PRODUCTO = MyBase.Columns("ID_PRODUCTO")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_LOTE = New System.Data.DataColumn("ID_LOTE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_LOTE)
            Me.columnCANTIDAD = New System.Data.DataColumn("CANTIDAD", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnFECHA_VENCIMIENTO = New System.Data.DataColumn("FECHA_VENCIMIENTO", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VENCIMIENTO)
            Me.columnPVP = New System.Data.DataColumn("PVP", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPVP)
            Me.columnDESCUENTO = New System.Data.DataColumn("DESCUENTO", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCUENTO)
            Me.columnID_PRODUCTO = New System.Data.DataColumn("ID_PRODUCTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PRODUCTO)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_LOTE, Me.columnID_PRODUCTO}, true))
            Me.columnID_LOTE.AutoIncrement = true
            Me.columnID_LOTE.AllowDBNull = false
            Me.columnID_LOTE.ReadOnly = true
            Me.columnCANTIDAD.AllowDBNull = false
            Me.columnFECHA_VENCIMIENTO.AllowDBNull = false
            Me.columnPVP.AllowDBNull = false
            Me.columnDESCUENTO.AllowDBNull = false
            Me.columnID_PRODUCTO.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLOTERow() As LOTERow
            Return CType(Me.NewRow,LOTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New LOTERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LOTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOTERowChangedEvent) Is Nothing) Then
                RaiseEvent LOTERowChanged(Me, New LOTERowChangeEvent(CType(e.Row,LOTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOTERowChangingEvent) Is Nothing) Then
                RaiseEvent LOTERowChanging(Me, New LOTERowChangeEvent(CType(e.Row,LOTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOTERowDeletedEvent) Is Nothing) Then
                RaiseEvent LOTERowDeleted(Me, New LOTERowChangeEvent(CType(e.Row,LOTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOTERowDeletingEvent) Is Nothing) Then
                RaiseEvent LOTERowDeleting(Me, New LOTERowChangeEvent(CType(e.Row,LOTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLOTERow(ByVal row As LOTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTROS_GASTOSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_OTROS_GASTOS As System.Data.DataColumn
        
        Private columnMONTO As System.Data.DataColumn
        
        Private columnFECHA As System.Data.DataColumn
        
        Private columnDESCRIPCION As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTROS_GASTOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_OTROS_GASTOSColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_OTROS_GASTOS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnMONTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTROS_GASTOSRow
            Get
                Return CType(Me.Rows(index),OTROS_GASTOSRow)
            End Get
        End Property
        
        Public Event OTROS_GASTOSRowChanging As OTROS_GASTOSRowChangeEventHandler
        
        Public Event OTROS_GASTOSRowChanged As OTROS_GASTOSRowChangeEventHandler
        
        Public Event OTROS_GASTOSRowDeleting As OTROS_GASTOSRowChangeEventHandler
        
        Public Event OTROS_GASTOSRowDeleted As OTROS_GASTOSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOTROS_GASTOSRow(ByVal row As OTROS_GASTOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOTROS_GASTOSRow(ByVal ID_OTROS_GASTOS As Decimal, ByVal MONTO As Double, ByVal FECHA As Date, ByVal DESCRIPCION As Double) As OTROS_GASTOSRow
            Dim rowOTROS_GASTOSRow As OTROS_GASTOSRow = CType(Me.NewRow,OTROS_GASTOSRow)
            rowOTROS_GASTOSRow.ItemArray = New Object() {ID_OTROS_GASTOS, MONTO, FECHA, DESCRIPCION}
            Me.Rows.Add(rowOTROS_GASTOSRow)
            Return rowOTROS_GASTOSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As OTROS_GASTOSDataTable = CType(MyBase.Clone,OTROS_GASTOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New OTROS_GASTOSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_OTROS_GASTOS = MyBase.Columns("ID_OTROS_GASTOS")
            Me.columnMONTO = MyBase.Columns("MONTO")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_OTROS_GASTOS = New System.Data.DataColumn("ID_OTROS_GASTOS", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_OTROS_GASTOS)
            Me.columnMONTO = New System.Data.DataColumn("MONTO", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONTO)
            Me.columnFECHA = New System.Data.DataColumn("FECHA", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnDESCRIPCION = New System.Data.DataColumn("DESCRIPCION", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnID_OTROS_GASTOS.AllowDBNull = false
            Me.columnMONTO.AllowDBNull = false
            Me.columnFECHA.AllowDBNull = false
            Me.columnDESCRIPCION.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOTROS_GASTOSRow() As OTROS_GASTOSRow
            Return CType(Me.NewRow,OTROS_GASTOSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New OTROS_GASTOSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OTROS_GASTOSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTROS_GASTOSRowChangedEvent) Is Nothing) Then
                RaiseEvent OTROS_GASTOSRowChanged(Me, New OTROS_GASTOSRowChangeEvent(CType(e.Row,OTROS_GASTOSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTROS_GASTOSRowChangingEvent) Is Nothing) Then
                RaiseEvent OTROS_GASTOSRowChanging(Me, New OTROS_GASTOSRowChangeEvent(CType(e.Row,OTROS_GASTOSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTROS_GASTOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTROS_GASTOSRowDeleted(Me, New OTROS_GASTOSRowChangeEvent(CType(e.Row,OTROS_GASTOSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTROS_GASTOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTROS_GASTOSRowDeleting(Me, New OTROS_GASTOSRowChangeEvent(CType(e.Row,OTROS_GASTOSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOTROS_GASTOSRow(ByVal row As OTROS_GASTOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTROS_GASTOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRODUCTODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_PRODUCTO As System.Data.DataColumn
        
        Private columnNOMBRE As System.Data.DataColumn
        
        Private columnCODIGO_DE_BARRAS As System.Data.DataColumn
        
        Private columnCODIGO As System.Data.DataColumn
        
        Private columnDESCRIPCION As System.Data.DataColumn
        
        Private columnGRAVADO_EXENTO As System.Data.DataColumn
        
        Private columnID_LINEA As System.Data.DataColumn
        
        Private columnUNIDADES_POR_PAQUETE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRODUCTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PRODUCTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PRODUCTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_DE_BARRASColumn() As System.Data.DataColumn
            Get
                Return Me.columnCODIGO_DE_BARRAS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGOColumn() As System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GRAVADO_EXENTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnGRAVADO_EXENTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_LINEAColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_LINEA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADES_POR_PAQUETEColumn() As System.Data.DataColumn
            Get
                Return Me.columnUNIDADES_POR_PAQUETE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRODUCTORow
            Get
                Return CType(Me.Rows(index),PRODUCTORow)
            End Get
        End Property
        
        Public Event PRODUCTORowChanging As PRODUCTORowChangeEventHandler
        
        Public Event PRODUCTORowChanged As PRODUCTORowChangeEventHandler
        
        Public Event PRODUCTORowDeleting As PRODUCTORowChangeEventHandler
        
        Public Event PRODUCTORowDeleted As PRODUCTORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRODUCTORow(ByVal row As PRODUCTORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRODUCTORow(ByVal NOMBRE As String, ByVal CODIGO_DE_BARRAS As String, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal GRAVADO_EXENTO As String, ByVal parentLINEARowByFK_PRODUCTO_LINEA As LINEARow, ByVal UNIDADES_POR_PAQUETE As Decimal) As PRODUCTORow
            Dim rowPRODUCTORow As PRODUCTORow = CType(Me.NewRow,PRODUCTORow)
            rowPRODUCTORow.ItemArray = New Object() {Nothing, NOMBRE, CODIGO_DE_BARRAS, CODIGO, DESCRIPCION, GRAVADO_EXENTO, parentLINEARowByFK_PRODUCTO_LINEA(0), UNIDADES_POR_PAQUETE}
            Me.Rows.Add(rowPRODUCTORow)
            Return rowPRODUCTORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_PRODUCTO(ByVal ID_PRODUCTO As Decimal) As PRODUCTORow
            Return CType(Me.Rows.Find(New Object() {ID_PRODUCTO}),PRODUCTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PRODUCTODataTable = CType(MyBase.Clone,PRODUCTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PRODUCTODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_PRODUCTO = MyBase.Columns("ID_PRODUCTO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnCODIGO_DE_BARRAS = MyBase.Columns("CODIGO_DE_BARRAS")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnGRAVADO_EXENTO = MyBase.Columns("GRAVADO_EXENTO")
            Me.columnID_LINEA = MyBase.Columns("ID_LINEA")
            Me.columnUNIDADES_POR_PAQUETE = MyBase.Columns("UNIDADES_POR_PAQUETE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_PRODUCTO = New System.Data.DataColumn("ID_PRODUCTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PRODUCTO)
            Me.columnNOMBRE = New System.Data.DataColumn("NOMBRE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnCODIGO_DE_BARRAS = New System.Data.DataColumn("CODIGO_DE_BARRAS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_DE_BARRAS)
            Me.columnCODIGO = New System.Data.DataColumn("CODIGO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnDESCRIPCION = New System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnGRAVADO_EXENTO = New System.Data.DataColumn("GRAVADO_EXENTO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRAVADO_EXENTO)
            Me.columnID_LINEA = New System.Data.DataColumn("ID_LINEA", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_LINEA)
            Me.columnUNIDADES_POR_PAQUETE = New System.Data.DataColumn("UNIDADES_POR_PAQUETE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDADES_POR_PAQUETE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_PRODUCTO}, true))
            Me.columnID_PRODUCTO.AutoIncrement = true
            Me.columnID_PRODUCTO.AllowDBNull = false
            Me.columnID_PRODUCTO.ReadOnly = true
            Me.columnID_PRODUCTO.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 2147483647
            Me.columnCODIGO_DE_BARRAS.AllowDBNull = false
            Me.columnCODIGO_DE_BARRAS.MaxLength = 2147483647
            Me.columnCODIGO.AllowDBNull = false
            Me.columnCODIGO.MaxLength = 2147483647
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 2147483647
            Me.columnGRAVADO_EXENTO.AllowDBNull = false
            Me.columnGRAVADO_EXENTO.MaxLength = 2147483647
            Me.columnID_LINEA.AllowDBNull = false
            Me.columnUNIDADES_POR_PAQUETE.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRODUCTORow() As PRODUCTORow
            Return CType(Me.NewRow,PRODUCTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PRODUCTORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRODUCTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRODUCTORowChangedEvent) Is Nothing) Then
                RaiseEvent PRODUCTORowChanged(Me, New PRODUCTORowChangeEvent(CType(e.Row,PRODUCTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRODUCTORowChangingEvent) Is Nothing) Then
                RaiseEvent PRODUCTORowChanging(Me, New PRODUCTORowChangeEvent(CType(e.Row,PRODUCTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRODUCTORowDeletedEvent) Is Nothing) Then
                RaiseEvent PRODUCTORowDeleted(Me, New PRODUCTORowChangeEvent(CType(e.Row,PRODUCTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRODUCTORowDeletingEvent) Is Nothing) Then
                RaiseEvent PRODUCTORowDeleting(Me, New PRODUCTORowChangeEvent(CType(e.Row,PRODUCTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRODUCTORow(ByVal row As PRODUCTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRODUCTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROVEEDORDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_PROVEEDOR As System.Data.DataColumn
        
        Private columnCodigo As System.Data.DataColumn
        
        Private columnRIF As System.Data.DataColumn
        
        Private columnNombre As System.Data.DataColumn
        
        Private columnMail As System.Data.DataColumn
        
        Private columnCiudad As System.Data.DataColumn
        
        Private columnDireccion As System.Data.DataColumn
        
        Private columnSaldo As System.Data.DataColumn
        
        Private columnEstatus As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROVEEDOR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PROVEEDORColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PROVEEDOR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIFColumn() As System.Data.DataColumn
            Get
                Return Me.columnRIF
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MailColumn() As System.Data.DataColumn
            Get
                Return Me.columnMail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiudadColumn() As System.Data.DataColumn
            Get
                Return Me.columnCiudad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstatusColumn() As System.Data.DataColumn
            Get
                Return Me.columnEstatus
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROVEEDORRow
            Get
                Return CType(Me.Rows(index),PROVEEDORRow)
            End Get
        End Property
        
        Public Event PROVEEDORRowChanging As PROVEEDORRowChangeEventHandler
        
        Public Event PROVEEDORRowChanged As PROVEEDORRowChangeEventHandler
        
        Public Event PROVEEDORRowDeleting As PROVEEDORRowChangeEventHandler
        
        Public Event PROVEEDORRowDeleted As PROVEEDORRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPROVEEDORRow(ByVal row As PROVEEDORRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPROVEEDORRow(ByVal Codigo As String, ByVal RIF As String, ByVal Nombre As String, ByVal Mail As String, ByVal Ciudad As String, ByVal Direccion As String, ByVal Saldo As Double, ByVal Estatus As String) As PROVEEDORRow
            Dim rowPROVEEDORRow As PROVEEDORRow = CType(Me.NewRow,PROVEEDORRow)
            rowPROVEEDORRow.ItemArray = New Object() {Nothing, Codigo, RIF, Nombre, Mail, Ciudad, Direccion, Saldo, Estatus}
            Me.Rows.Add(rowPROVEEDORRow)
            Return rowPROVEEDORRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_PROVEEDOR(ByVal ID_PROVEEDOR As Decimal) As PROVEEDORRow
            Return CType(Me.Rows.Find(New Object() {ID_PROVEEDOR}),PROVEEDORRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PROVEEDORDataTable = CType(MyBase.Clone,PROVEEDORDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PROVEEDORDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_PROVEEDOR = MyBase.Columns("ID_PROVEEDOR")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnRIF = MyBase.Columns("RIF")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMail = MyBase.Columns("Mail")
            Me.columnCiudad = MyBase.Columns("Ciudad")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnSaldo = MyBase.Columns("Saldo")
            Me.columnEstatus = MyBase.Columns("Estatus")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_PROVEEDOR = New System.Data.DataColumn("ID_PROVEEDOR", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PROVEEDOR)
            Me.columnCodigo = New System.Data.DataColumn("Codigo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnRIF = New System.Data.DataColumn("RIF", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIF)
            Me.columnNombre = New System.Data.DataColumn("Nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMail = New System.Data.DataColumn("Mail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMail)
            Me.columnCiudad = New System.Data.DataColumn("Ciudad", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiudad)
            Me.columnDireccion = New System.Data.DataColumn("Direccion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnSaldo = New System.Data.DataColumn("Saldo", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.columnEstatus = New System.Data.DataColumn("Estatus", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstatus)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_PROVEEDOR}, true))
            Me.columnID_PROVEEDOR.AutoIncrement = true
            Me.columnID_PROVEEDOR.AllowDBNull = false
            Me.columnID_PROVEEDOR.ReadOnly = true
            Me.columnID_PROVEEDOR.Unique = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.MaxLength = 2147483647
            Me.columnRIF.AllowDBNull = false
            Me.columnRIF.MaxLength = 2147483647
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 2147483647
            Me.columnMail.MaxLength = 2147483647
            Me.columnCiudad.AllowDBNull = false
            Me.columnCiudad.MaxLength = 2147483647
            Me.columnDireccion.AllowDBNull = false
            Me.columnDireccion.MaxLength = 2147483647
            Me.columnSaldo.AllowDBNull = false
            Me.columnEstatus.AllowDBNull = false
            Me.columnEstatus.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPROVEEDORRow() As PROVEEDORRow
            Return CType(Me.NewRow,PROVEEDORRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PROVEEDORRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PROVEEDORRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROVEEDORRowChangedEvent) Is Nothing) Then
                RaiseEvent PROVEEDORRowChanged(Me, New PROVEEDORRowChangeEvent(CType(e.Row,PROVEEDORRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROVEEDORRowChangingEvent) Is Nothing) Then
                RaiseEvent PROVEEDORRowChanging(Me, New PROVEEDORRowChangeEvent(CType(e.Row,PROVEEDORRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROVEEDORRowDeletedEvent) Is Nothing) Then
                RaiseEvent PROVEEDORRowDeleted(Me, New PROVEEDORRowChangeEvent(CType(e.Row,PROVEEDORRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROVEEDORRowDeletingEvent) Is Nothing) Then
                RaiseEvent PROVEEDORRowDeleting(Me, New PROVEEDORRowChangeEvent(CType(e.Row,PROVEEDORRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePROVEEDORRow(ByVal row As PROVEEDORRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROVEEDORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROVEEDOR_PRODUCTODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_PROVEEDOR As System.Data.DataColumn
        
        Private columnID_PRODUCTO As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROVEEDOR_PRODUCTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PROVEEDORColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PROVEEDOR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PRODUCTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PRODUCTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROVEEDOR_PRODUCTORow
            Get
                Return CType(Me.Rows(index),PROVEEDOR_PRODUCTORow)
            End Get
        End Property
        
        Public Event PROVEEDOR_PRODUCTORowChanging As PROVEEDOR_PRODUCTORowChangeEventHandler
        
        Public Event PROVEEDOR_PRODUCTORowChanged As PROVEEDOR_PRODUCTORowChangeEventHandler
        
        Public Event PROVEEDOR_PRODUCTORowDeleting As PROVEEDOR_PRODUCTORowChangeEventHandler
        
        Public Event PROVEEDOR_PRODUCTORowDeleted As PROVEEDOR_PRODUCTORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPROVEEDOR_PRODUCTORow(ByVal row As PROVEEDOR_PRODUCTORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPROVEEDOR_PRODUCTORow(ByVal parentPROVEEDORRowByFK_PROVEEDOR_PRODUCTO_PROVEEDOR As PROVEEDORRow, ByVal parentPRODUCTORowByFK_PROVEEDOR_PRODUCTO_PRODUCTO As PRODUCTORow) As PROVEEDOR_PRODUCTORow
            Dim rowPROVEEDOR_PRODUCTORow As PROVEEDOR_PRODUCTORow = CType(Me.NewRow,PROVEEDOR_PRODUCTORow)
            rowPROVEEDOR_PRODUCTORow.ItemArray = New Object() {parentPROVEEDORRowByFK_PROVEEDOR_PRODUCTO_PROVEEDOR(0), parentPRODUCTORowByFK_PROVEEDOR_PRODUCTO_PRODUCTO(0)}
            Me.Rows.Add(rowPROVEEDOR_PRODUCTORow)
            Return rowPROVEEDOR_PRODUCTORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_PROVEEDORID_PRODUCTO(ByVal ID_PROVEEDOR As Decimal, ByVal ID_PRODUCTO As Decimal) As PROVEEDOR_PRODUCTORow
            Return CType(Me.Rows.Find(New Object() {ID_PROVEEDOR, ID_PRODUCTO}),PROVEEDOR_PRODUCTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PROVEEDOR_PRODUCTODataTable = CType(MyBase.Clone,PROVEEDOR_PRODUCTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PROVEEDOR_PRODUCTODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_PROVEEDOR = MyBase.Columns("ID_PROVEEDOR")
            Me.columnID_PRODUCTO = MyBase.Columns("ID_PRODUCTO")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_PROVEEDOR = New System.Data.DataColumn("ID_PROVEEDOR", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PROVEEDOR)
            Me.columnID_PRODUCTO = New System.Data.DataColumn("ID_PRODUCTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PRODUCTO)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_PROVEEDOR, Me.columnID_PRODUCTO}, true))
            Me.columnID_PROVEEDOR.AllowDBNull = false
            Me.columnID_PRODUCTO.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPROVEEDOR_PRODUCTORow() As PROVEEDOR_PRODUCTORow
            Return CType(Me.NewRow,PROVEEDOR_PRODUCTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PROVEEDOR_PRODUCTORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PROVEEDOR_PRODUCTORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROVEEDOR_PRODUCTORowChangedEvent) Is Nothing) Then
                RaiseEvent PROVEEDOR_PRODUCTORowChanged(Me, New PROVEEDOR_PRODUCTORowChangeEvent(CType(e.Row,PROVEEDOR_PRODUCTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROVEEDOR_PRODUCTORowChangingEvent) Is Nothing) Then
                RaiseEvent PROVEEDOR_PRODUCTORowChanging(Me, New PROVEEDOR_PRODUCTORowChangeEvent(CType(e.Row,PROVEEDOR_PRODUCTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROVEEDOR_PRODUCTORowDeletedEvent) Is Nothing) Then
                RaiseEvent PROVEEDOR_PRODUCTORowDeleted(Me, New PROVEEDOR_PRODUCTORowChangeEvent(CType(e.Row,PROVEEDOR_PRODUCTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROVEEDOR_PRODUCTORowDeletingEvent) Is Nothing) Then
                RaiseEvent PROVEEDOR_PRODUCTORowDeleting(Me, New PROVEEDOR_PRODUCTORowChangeEvent(CType(e.Row,PROVEEDOR_PRODUCTORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePROVEEDOR_PRODUCTORow(ByVal row As PROVEEDOR_PRODUCTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROVEEDOR_PRODUCTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TELEFONO_PROVEEDORDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_TELEFONO_PROVEEDOR As System.Data.DataColumn
        
        Private columnID_PROVEEDOR As System.Data.DataColumn
        
        Private columnCODIGO_DE_AREA As System.Data.DataColumn
        
        Private columnNUMERO As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TELEFONO_PROVEEDOR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_TELEFONO_PROVEEDORColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_TELEFONO_PROVEEDOR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PROVEEDORColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PROVEEDOR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_DE_AREAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCODIGO_DE_AREA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMEROColumn() As System.Data.DataColumn
            Get
                Return Me.columnNUMERO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TELEFONO_PROVEEDORRow
            Get
                Return CType(Me.Rows(index),TELEFONO_PROVEEDORRow)
            End Get
        End Property
        
        Public Event TELEFONO_PROVEEDORRowChanging As TELEFONO_PROVEEDORRowChangeEventHandler
        
        Public Event TELEFONO_PROVEEDORRowChanged As TELEFONO_PROVEEDORRowChangeEventHandler
        
        Public Event TELEFONO_PROVEEDORRowDeleting As TELEFONO_PROVEEDORRowChangeEventHandler
        
        Public Event TELEFONO_PROVEEDORRowDeleted As TELEFONO_PROVEEDORRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTELEFONO_PROVEEDORRow(ByVal row As TELEFONO_PROVEEDORRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTELEFONO_PROVEEDORRow(ByVal parentPROVEEDORRowByFK_TELEFONO_PROVEEDOR_PROVEEDOR As PROVEEDORRow, ByVal CODIGO_DE_AREA As String, ByVal NUMERO As String) As TELEFONO_PROVEEDORRow
            Dim rowTELEFONO_PROVEEDORRow As TELEFONO_PROVEEDORRow = CType(Me.NewRow,TELEFONO_PROVEEDORRow)
            rowTELEFONO_PROVEEDORRow.ItemArray = New Object() {Nothing, parentPROVEEDORRowByFK_TELEFONO_PROVEEDOR_PROVEEDOR(0), CODIGO_DE_AREA, NUMERO}
            Me.Rows.Add(rowTELEFONO_PROVEEDORRow)
            Return rowTELEFONO_PROVEEDORRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_TELEFONO_PROVEEDORID_PROVEEDOR(ByVal ID_TELEFONO_PROVEEDOR As Decimal, ByVal ID_PROVEEDOR As Decimal) As TELEFONO_PROVEEDORRow
            Return CType(Me.Rows.Find(New Object() {ID_TELEFONO_PROVEEDOR, ID_PROVEEDOR}),TELEFONO_PROVEEDORRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TELEFONO_PROVEEDORDataTable = CType(MyBase.Clone,TELEFONO_PROVEEDORDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TELEFONO_PROVEEDORDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_TELEFONO_PROVEEDOR = MyBase.Columns("ID_TELEFONO_PROVEEDOR")
            Me.columnID_PROVEEDOR = MyBase.Columns("ID_PROVEEDOR")
            Me.columnCODIGO_DE_AREA = MyBase.Columns("CODIGO_DE_AREA")
            Me.columnNUMERO = MyBase.Columns("NUMERO")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_TELEFONO_PROVEEDOR = New System.Data.DataColumn("ID_TELEFONO_PROVEEDOR", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_TELEFONO_PROVEEDOR)
            Me.columnID_PROVEEDOR = New System.Data.DataColumn("ID_PROVEEDOR", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PROVEEDOR)
            Me.columnCODIGO_DE_AREA = New System.Data.DataColumn("CODIGO_DE_AREA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_DE_AREA)
            Me.columnNUMERO = New System.Data.DataColumn("NUMERO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_TELEFONO_PROVEEDOR, Me.columnID_PROVEEDOR}, true))
            Me.columnID_TELEFONO_PROVEEDOR.AutoIncrement = true
            Me.columnID_TELEFONO_PROVEEDOR.AllowDBNull = false
            Me.columnID_TELEFONO_PROVEEDOR.ReadOnly = true
            Me.columnID_PROVEEDOR.AllowDBNull = false
            Me.columnCODIGO_DE_AREA.AllowDBNull = false
            Me.columnCODIGO_DE_AREA.MaxLength = 2147483647
            Me.columnNUMERO.AllowDBNull = false
            Me.columnNUMERO.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTELEFONO_PROVEEDORRow() As TELEFONO_PROVEEDORRow
            Return CType(Me.NewRow,TELEFONO_PROVEEDORRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TELEFONO_PROVEEDORRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TELEFONO_PROVEEDORRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TELEFONO_PROVEEDORRowChangedEvent) Is Nothing) Then
                RaiseEvent TELEFONO_PROVEEDORRowChanged(Me, New TELEFONO_PROVEEDORRowChangeEvent(CType(e.Row,TELEFONO_PROVEEDORRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TELEFONO_PROVEEDORRowChangingEvent) Is Nothing) Then
                RaiseEvent TELEFONO_PROVEEDORRowChanging(Me, New TELEFONO_PROVEEDORRowChangeEvent(CType(e.Row,TELEFONO_PROVEEDORRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TELEFONO_PROVEEDORRowDeletedEvent) Is Nothing) Then
                RaiseEvent TELEFONO_PROVEEDORRowDeleted(Me, New TELEFONO_PROVEEDORRowChangeEvent(CType(e.Row,TELEFONO_PROVEEDORRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TELEFONO_PROVEEDORRowDeletingEvent) Is Nothing) Then
                RaiseEvent TELEFONO_PROVEEDORRowDeleting(Me, New TELEFONO_PROVEEDORRowChangeEvent(CType(e.Row,TELEFONO_PROVEEDORRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTELEFONO_PROVEEDORRow(ByVal row As TELEFONO_PROVEEDORRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TELEFONO_PROVEEDORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VENTADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_VENTA As System.Data.DataColumn
        
        Private columnNUMERO_FACTURA As System.Data.DataColumn
        
        Private columnFECHA As System.Data.DataColumn
        
        Private columnVENCE As System.Data.DataColumn
        
        Private columnDESCUENTO As System.Data.DataColumn
        
        Private columnTIPO_PAGO As System.Data.DataColumn
        
        Private columnNUMERO_T_CHEQ As System.Data.DataColumn
        
        Private columnID_CLIENTE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VENTA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_VENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_VENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_FACTURAColumn() As System.Data.DataColumn
            Get
                Return Me.columnNUMERO_FACTURA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENCEColumn() As System.Data.DataColumn
            Get
                Return Me.columnVENCE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCUENTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESCUENTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_PAGOColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_PAGO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_T_CHEQColumn() As System.Data.DataColumn
            Get
                Return Me.columnNUMERO_T_CHEQ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_CLIENTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_CLIENTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VENTARow
            Get
                Return CType(Me.Rows(index),VENTARow)
            End Get
        End Property
        
        Public Event VENTARowChanging As VENTARowChangeEventHandler
        
        Public Event VENTARowChanged As VENTARowChangeEventHandler
        
        Public Event VENTARowDeleting As VENTARowChangeEventHandler
        
        Public Event VENTARowDeleted As VENTARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVENTARow(ByVal row As VENTARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVENTARow(ByVal ID_VENTA As Decimal, ByVal NUMERO_FACTURA As String, ByVal FECHA As Date, ByVal VENCE As Date, ByVal DESCUENTO As Double, ByVal TIPO_PAGO As String, ByVal NUMERO_T_CHEQ As String, ByVal parentCLIENTERowByFK_VENTA_CLIENTE As CLIENTERow) As VENTARow
            Dim rowVENTARow As VENTARow = CType(Me.NewRow,VENTARow)
            rowVENTARow.ItemArray = New Object() {ID_VENTA, NUMERO_FACTURA, FECHA, VENCE, DESCUENTO, TIPO_PAGO, NUMERO_T_CHEQ, parentCLIENTERowByFK_VENTA_CLIENTE(0)}
            Me.Rows.Add(rowVENTARow)
            Return rowVENTARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_VENTA(ByVal ID_VENTA As Decimal) As VENTARow
            Return CType(Me.Rows.Find(New Object() {ID_VENTA}),VENTARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As VENTADataTable = CType(MyBase.Clone,VENTADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New VENTADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_VENTA = MyBase.Columns("ID_VENTA")
            Me.columnNUMERO_FACTURA = MyBase.Columns("NUMERO_FACTURA")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnVENCE = MyBase.Columns("VENCE")
            Me.columnDESCUENTO = MyBase.Columns("DESCUENTO")
            Me.columnTIPO_PAGO = MyBase.Columns("TIPO_PAGO")
            Me.columnNUMERO_T_CHEQ = MyBase.Columns("NUMERO_T_CHEQ")
            Me.columnID_CLIENTE = MyBase.Columns("ID_CLIENTE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_VENTA = New System.Data.DataColumn("ID_VENTA", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_VENTA)
            Me.columnNUMERO_FACTURA = New System.Data.DataColumn("NUMERO_FACTURA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_FACTURA)
            Me.columnFECHA = New System.Data.DataColumn("FECHA", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnVENCE = New System.Data.DataColumn("VENCE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENCE)
            Me.columnDESCUENTO = New System.Data.DataColumn("DESCUENTO", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCUENTO)
            Me.columnTIPO_PAGO = New System.Data.DataColumn("TIPO_PAGO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_PAGO)
            Me.columnNUMERO_T_CHEQ = New System.Data.DataColumn("NUMERO_T_CHEQ", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_T_CHEQ)
            Me.columnID_CLIENTE = New System.Data.DataColumn("ID_CLIENTE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CLIENTE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_VENTA}, true))
            Me.columnID_VENTA.AllowDBNull = false
            Me.columnID_VENTA.Unique = true
            Me.columnNUMERO_FACTURA.AllowDBNull = false
            Me.columnNUMERO_FACTURA.MaxLength = 2147483647
            Me.columnFECHA.AllowDBNull = false
            Me.columnVENCE.AllowDBNull = false
            Me.columnDESCUENTO.AllowDBNull = false
            Me.columnTIPO_PAGO.AllowDBNull = false
            Me.columnTIPO_PAGO.MaxLength = 2147483647
            Me.columnNUMERO_T_CHEQ.AllowDBNull = false
            Me.columnNUMERO_T_CHEQ.MaxLength = 2147483647
            Me.columnID_CLIENTE.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVENTARow() As VENTARow
            Return CType(Me.NewRow,VENTARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New VENTARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VENTARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VENTARowChangedEvent) Is Nothing) Then
                RaiseEvent VENTARowChanged(Me, New VENTARowChangeEvent(CType(e.Row,VENTARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VENTARowChangingEvent) Is Nothing) Then
                RaiseEvent VENTARowChanging(Me, New VENTARowChangeEvent(CType(e.Row,VENTARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VENTARowDeletedEvent) Is Nothing) Then
                RaiseEvent VENTARowDeleted(Me, New VENTARowChangeEvent(CType(e.Row,VENTARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VENTARowDeletingEvent) Is Nothing) Then
                RaiseEvent VENTARowDeleting(Me, New VENTARowChangeEvent(CType(e.Row,VENTARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVENTARow(ByVal row As VENTARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VENTADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PEDIDO_FRECUENTEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_PEDIDO As System.Data.DataColumn
        
        Private columnNUMERO_PEDIDO As System.Data.DataColumn
        
        Private columnFECHA_INICIO As System.Data.DataColumn
        
        Private columnFECHA_FIN As System.Data.DataColumn
        
        Private columnFECHA_ULTIMA_COMPRA As System.Data.DataColumn
        
        Private columnDESCRIPCION As System.Data.DataColumn
        
        Private columnCANTIDAD_DIARIA As System.Data.DataColumn
        
        Private columnID_PRODUCTO As System.Data.DataColumn
        
        Private columnID_CLIENTE As System.Data.DataColumn
        
        Private columnESTATUS As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PEDIDO_FRECUENTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PEDIDOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PEDIDO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_PEDIDOColumn() As System.Data.DataColumn
            Get
                Return Me.columnNUMERO_PEDIDO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_INICIOColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_INICIO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_FINColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_FIN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ULTIMA_COMPRAColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_ULTIMA_COMPRA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDAD_DIARIAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD_DIARIA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PRODUCTOColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_PRODUCTO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_CLIENTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_CLIENTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTATUSColumn() As System.Data.DataColumn
            Get
                Return Me.columnESTATUS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PEDIDO_FRECUENTERow
            Get
                Return CType(Me.Rows(index),PEDIDO_FRECUENTERow)
            End Get
        End Property
        
        Public Event PEDIDO_FRECUENTERowChanging As PEDIDO_FRECUENTERowChangeEventHandler
        
        Public Event PEDIDO_FRECUENTERowChanged As PEDIDO_FRECUENTERowChangeEventHandler
        
        Public Event PEDIDO_FRECUENTERowDeleting As PEDIDO_FRECUENTERowChangeEventHandler
        
        Public Event PEDIDO_FRECUENTERowDeleted As PEDIDO_FRECUENTERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPEDIDO_FRECUENTERow(ByVal row As PEDIDO_FRECUENTERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPEDIDO_FRECUENTERow(ByVal NUMERO_PEDIDO As String, ByVal FECHA_INICIO As Date, ByVal FECHA_FIN As Date, ByVal FECHA_ULTIMA_COMPRA As Date, ByVal DESCRIPCION As String, ByVal CANTIDAD_DIARIA As Decimal, ByVal parentPRODUCTORowByFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE As PRODUCTORow, ByVal parentCLIENTERowByFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1 As CLIENTERow, ByVal ESTATUS As String) As PEDIDO_FRECUENTERow
            Dim rowPEDIDO_FRECUENTERow As PEDIDO_FRECUENTERow = CType(Me.NewRow,PEDIDO_FRECUENTERow)
            rowPEDIDO_FRECUENTERow.ItemArray = New Object() {Nothing, NUMERO_PEDIDO, FECHA_INICIO, FECHA_FIN, FECHA_ULTIMA_COMPRA, DESCRIPCION, CANTIDAD_DIARIA, parentPRODUCTORowByFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE(0), parentCLIENTERowByFK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1(0), ESTATUS}
            Me.Rows.Add(rowPEDIDO_FRECUENTERow)
            Return rowPEDIDO_FRECUENTERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_PEDIDO(ByVal ID_PEDIDO As Decimal) As PEDIDO_FRECUENTERow
            Return CType(Me.Rows.Find(New Object() {ID_PEDIDO}),PEDIDO_FRECUENTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PEDIDO_FRECUENTEDataTable = CType(MyBase.Clone,PEDIDO_FRECUENTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PEDIDO_FRECUENTEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_PEDIDO = MyBase.Columns("ID_PEDIDO")
            Me.columnNUMERO_PEDIDO = MyBase.Columns("NUMERO_PEDIDO")
            Me.columnFECHA_INICIO = MyBase.Columns("FECHA_INICIO")
            Me.columnFECHA_FIN = MyBase.Columns("FECHA_FIN")
            Me.columnFECHA_ULTIMA_COMPRA = MyBase.Columns("FECHA_ULTIMA_COMPRA")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnCANTIDAD_DIARIA = MyBase.Columns("CANTIDAD_DIARIA")
            Me.columnID_PRODUCTO = MyBase.Columns("ID_PRODUCTO")
            Me.columnID_CLIENTE = MyBase.Columns("ID_CLIENTE")
            Me.columnESTATUS = MyBase.Columns("ESTATUS")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_PEDIDO = New System.Data.DataColumn("ID_PEDIDO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PEDIDO)
            Me.columnNUMERO_PEDIDO = New System.Data.DataColumn("NUMERO_PEDIDO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_PEDIDO)
            Me.columnFECHA_INICIO = New System.Data.DataColumn("FECHA_INICIO", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_INICIO)
            Me.columnFECHA_FIN = New System.Data.DataColumn("FECHA_FIN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_FIN)
            Me.columnFECHA_ULTIMA_COMPRA = New System.Data.DataColumn("FECHA_ULTIMA_COMPRA", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ULTIMA_COMPRA)
            Me.columnDESCRIPCION = New System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnCANTIDAD_DIARIA = New System.Data.DataColumn("CANTIDAD_DIARIA", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD_DIARIA)
            Me.columnID_PRODUCTO = New System.Data.DataColumn("ID_PRODUCTO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PRODUCTO)
            Me.columnID_CLIENTE = New System.Data.DataColumn("ID_CLIENTE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CLIENTE)
            Me.columnESTATUS = New System.Data.DataColumn("ESTATUS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTATUS)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_PEDIDO}, true))
            Me.columnID_PEDIDO.AutoIncrement = true
            Me.columnID_PEDIDO.AllowDBNull = false
            Me.columnID_PEDIDO.ReadOnly = true
            Me.columnID_PEDIDO.Unique = true
            Me.columnNUMERO_PEDIDO.AllowDBNull = false
            Me.columnNUMERO_PEDIDO.MaxLength = 2147483647
            Me.columnFECHA_INICIO.AllowDBNull = false
            Me.columnFECHA_FIN.AllowDBNull = false
            Me.columnFECHA_ULTIMA_COMPRA.AllowDBNull = false
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 2147483647
            Me.columnCANTIDAD_DIARIA.AllowDBNull = false
            Me.columnID_PRODUCTO.AllowDBNull = false
            Me.columnID_CLIENTE.AllowDBNull = false
            Me.columnESTATUS.AllowDBNull = false
            Me.columnESTATUS.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPEDIDO_FRECUENTERow() As PEDIDO_FRECUENTERow
            Return CType(Me.NewRow,PEDIDO_FRECUENTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PEDIDO_FRECUENTERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PEDIDO_FRECUENTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PEDIDO_FRECUENTERowChangedEvent) Is Nothing) Then
                RaiseEvent PEDIDO_FRECUENTERowChanged(Me, New PEDIDO_FRECUENTERowChangeEvent(CType(e.Row,PEDIDO_FRECUENTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PEDIDO_FRECUENTERowChangingEvent) Is Nothing) Then
                RaiseEvent PEDIDO_FRECUENTERowChanging(Me, New PEDIDO_FRECUENTERowChangeEvent(CType(e.Row,PEDIDO_FRECUENTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PEDIDO_FRECUENTERowDeletedEvent) Is Nothing) Then
                RaiseEvent PEDIDO_FRECUENTERowDeleted(Me, New PEDIDO_FRECUENTERowChangeEvent(CType(e.Row,PEDIDO_FRECUENTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PEDIDO_FRECUENTERowDeletingEvent) Is Nothing) Then
                RaiseEvent PEDIDO_FRECUENTERowDeleting(Me, New PEDIDO_FRECUENTERowChangeEvent(CType(e.Row,PEDIDO_FRECUENTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePEDIDO_FRECUENTERow(ByVal row As PEDIDO_FRECUENTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PEDIDO_FRECUENTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CLIENTEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_CLIENTE As System.Data.DataColumn
        
        Private columnTIPO_IDENTIDAD As System.Data.DataColumn
        
        Private columnDOCUMENTO_IDENTIDAD As System.Data.DataColumn
        
        Private columnNOMBRE As System.Data.DataColumn
        
        Private columnAPELLIDO As System.Data.DataColumn
        
        Private columnTELEFONO As System.Data.DataColumn
        
        Private columnDIRECCION As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CLIENTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_CLIENTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_CLIENTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_IDENTIDADColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_IDENTIDAD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCUMENTO_IDENTIDADColumn() As System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTO_IDENTIDAD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APELLIDOColumn() As System.Data.DataColumn
            Get
                Return Me.columnAPELLIDO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TELEFONOColumn() As System.Data.DataColumn
            Get
                Return Me.columnTELEFONO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIRECCIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDIRECCION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CLIENTERow
            Get
                Return CType(Me.Rows(index),CLIENTERow)
            End Get
        End Property
        
        Public Event CLIENTERowChanging As CLIENTERowChangeEventHandler
        
        Public Event CLIENTERowChanged As CLIENTERowChangeEventHandler
        
        Public Event CLIENTERowDeleting As CLIENTERowChangeEventHandler
        
        Public Event CLIENTERowDeleted As CLIENTERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCLIENTERow(ByVal row As CLIENTERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCLIENTERow(ByVal TIPO_IDENTIDAD As String, ByVal DOCUMENTO_IDENTIDAD As String, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal TELEFONO As String, ByVal DIRECCION As String) As CLIENTERow
            Dim rowCLIENTERow As CLIENTERow = CType(Me.NewRow,CLIENTERow)
            rowCLIENTERow.ItemArray = New Object() {Nothing, TIPO_IDENTIDAD, DOCUMENTO_IDENTIDAD, NOMBRE, APELLIDO, TELEFONO, DIRECCION}
            Me.Rows.Add(rowCLIENTERow)
            Return rowCLIENTERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_CLIENTE(ByVal ID_CLIENTE As Decimal) As CLIENTERow
            Return CType(Me.Rows.Find(New Object() {ID_CLIENTE}),CLIENTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CLIENTEDataTable = CType(MyBase.Clone,CLIENTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CLIENTEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_CLIENTE = MyBase.Columns("ID_CLIENTE")
            Me.columnTIPO_IDENTIDAD = MyBase.Columns("TIPO_IDENTIDAD")
            Me.columnDOCUMENTO_IDENTIDAD = MyBase.Columns("DOCUMENTO_IDENTIDAD")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnAPELLIDO = MyBase.Columns("APELLIDO")
            Me.columnTELEFONO = MyBase.Columns("TELEFONO")
            Me.columnDIRECCION = MyBase.Columns("DIRECCION")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_CLIENTE = New System.Data.DataColumn("ID_CLIENTE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CLIENTE)
            Me.columnTIPO_IDENTIDAD = New System.Data.DataColumn("TIPO_IDENTIDAD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_IDENTIDAD)
            Me.columnDOCUMENTO_IDENTIDAD = New System.Data.DataColumn("DOCUMENTO_IDENTIDAD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTO_IDENTIDAD)
            Me.columnNOMBRE = New System.Data.DataColumn("NOMBRE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnAPELLIDO = New System.Data.DataColumn("APELLIDO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPELLIDO)
            Me.columnTELEFONO = New System.Data.DataColumn("TELEFONO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONO)
            Me.columnDIRECCION = New System.Data.DataColumn("DIRECCION", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_CLIENTE}, true))
            Me.columnID_CLIENTE.AutoIncrement = true
            Me.columnID_CLIENTE.AllowDBNull = false
            Me.columnID_CLIENTE.ReadOnly = true
            Me.columnID_CLIENTE.Unique = true
            Me.columnTIPO_IDENTIDAD.AllowDBNull = false
            Me.columnTIPO_IDENTIDAD.MaxLength = 2147483647
            Me.columnDOCUMENTO_IDENTIDAD.AllowDBNull = false
            Me.columnDOCUMENTO_IDENTIDAD.MaxLength = 2147483647
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 2147483647
            Me.columnAPELLIDO.MaxLength = 2147483647
            Me.columnTELEFONO.AllowDBNull = false
            Me.columnTELEFONO.MaxLength = 2147483647
            Me.columnDIRECCION.AllowDBNull = false
            Me.columnDIRECCION.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCLIENTERow() As CLIENTERow
            Return CType(Me.NewRow,CLIENTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CLIENTERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CLIENTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CLIENTERowChangedEvent) Is Nothing) Then
                RaiseEvent CLIENTERowChanged(Me, New CLIENTERowChangeEvent(CType(e.Row,CLIENTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CLIENTERowChangingEvent) Is Nothing) Then
                RaiseEvent CLIENTERowChanging(Me, New CLIENTERowChangeEvent(CType(e.Row,CLIENTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CLIENTERowDeletedEvent) Is Nothing) Then
                RaiseEvent CLIENTERowDeleted(Me, New CLIENTERowChangeEvent(CType(e.Row,CLIENTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CLIENTERowDeletingEvent) Is Nothing) Then
                RaiseEvent CLIENTERowDeleting(Me, New CLIENTERowChangeEvent(CType(e.Row,CLIENTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCLIENTERow(ByVal row As CLIENTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CLIENTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LINEADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_LINEA As System.Data.DataColumn
        
        Private columnNOMBRE As System.Data.DataColumn
        
        Private columnDESCRIPCION As System.Data.DataColumn
        
        Private columnDESCUENTO_MAXIMO As System.Data.DataColumn
        
        Private columnMARGEN_UTIL As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LINEA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_LINEAColumn() As System.Data.DataColumn
            Get
                Return Me.columnID_LINEA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCUENTO_MAXIMOColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESCUENTO_MAXIMO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MARGEN_UTILColumn() As System.Data.DataColumn
            Get
                Return Me.columnMARGEN_UTIL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LINEARow
            Get
                Return CType(Me.Rows(index),LINEARow)
            End Get
        End Property
        
        Public Event LINEARowChanging As LINEARowChangeEventHandler
        
        Public Event LINEARowChanged As LINEARowChangeEventHandler
        
        Public Event LINEARowDeleting As LINEARowChangeEventHandler
        
        Public Event LINEARowDeleted As LINEARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLINEARow(ByVal row As LINEARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLINEARow(ByVal NOMBRE As String, ByVal DESCRIPCION As String, ByVal DESCUENTO_MAXIMO As Double, ByVal MARGEN_UTIL As Double) As LINEARow
            Dim rowLINEARow As LINEARow = CType(Me.NewRow,LINEARow)
            rowLINEARow.ItemArray = New Object() {Nothing, NOMBRE, DESCRIPCION, DESCUENTO_MAXIMO, MARGEN_UTIL}
            Me.Rows.Add(rowLINEARow)
            Return rowLINEARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_LINEA(ByVal ID_LINEA As Decimal) As LINEARow
            Return CType(Me.Rows.Find(New Object() {ID_LINEA}),LINEARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As LINEADataTable = CType(MyBase.Clone,LINEADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New LINEADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_LINEA = MyBase.Columns("ID_LINEA")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnDESCUENTO_MAXIMO = MyBase.Columns("DESCUENTO_MAXIMO")
            Me.columnMARGEN_UTIL = MyBase.Columns("MARGEN_UTIL")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_LINEA = New System.Data.DataColumn("ID_LINEA", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_LINEA)
            Me.columnNOMBRE = New System.Data.DataColumn("NOMBRE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnDESCRIPCION = New System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnDESCUENTO_MAXIMO = New System.Data.DataColumn("DESCUENTO_MAXIMO", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCUENTO_MAXIMO)
            Me.columnMARGEN_UTIL = New System.Data.DataColumn("MARGEN_UTIL", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARGEN_UTIL)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID_LINEA}, true))
            Me.columnID_LINEA.AutoIncrement = true
            Me.columnID_LINEA.AllowDBNull = false
            Me.columnID_LINEA.ReadOnly = true
            Me.columnID_LINEA.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 2147483647
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 2147483647
            Me.columnDESCUENTO_MAXIMO.AllowDBNull = false
            Me.columnMARGEN_UTIL.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLINEARow() As LINEARow
            Return CType(Me.NewRow,LINEARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New LINEARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LINEARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LINEARowChangedEvent) Is Nothing) Then
                RaiseEvent LINEARowChanged(Me, New LINEARowChangeEvent(CType(e.Row,LINEARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LINEARowChangingEvent) Is Nothing) Then
                RaiseEvent LINEARowChanging(Me, New LINEARowChangeEvent(CType(e.Row,LINEARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LINEARowDeletedEvent) Is Nothing) Then
                RaiseEvent LINEARowDeleted(Me, New LINEARowChangeEvent(CType(e.Row,LINEARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LINEARowDeletingEvent) Is Nothing) Then
                RaiseEvent LINEARowDeleting(Me, New LINEARowChangeEvent(CType(e.Row,LINEARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLINEARow(ByVal row As LINEARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As FarmaciaSJDataSet = New FarmaciaSJDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LINEADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COMPRARow
        Inherits System.Data.DataRow
        
        Private tableCOMPRA As COMPRADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOMPRA = CType(Me.Table,COMPRADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_COMPRA() As Decimal
            Get
                Return CType(Me(Me.tableCOMPRA.ID_COMPRAColumn),Decimal)
            End Get
            Set
                Me(Me.tableCOMPRA.ID_COMPRAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMPRA() As Date
            Get
                Return CType(Me(Me.tableCOMPRA.FECHA_COMPRAColumn),Date)
            End Get
            Set
                Me(Me.tableCOMPRA.FECHA_COMPRAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENCE() As Date
            Get
                Return CType(Me(Me.tableCOMPRA.VENCEColumn),Date)
            End Get
            Set
                Me(Me.tableCOMPRA.VENCEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONTO() As Double
            Get
                Return CType(Me(Me.tableCOMPRA.MONTOColumn),Double)
            End Get
            Set
                Me(Me.tableCOMPRA.MONTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCUENTO_GLOBAL() As Double
            Get
                Return CType(Me(Me.tableCOMPRA.DESCUENTO_GLOBALColumn),Double)
            End Get
            Set
                Me(Me.tableCOMPRA.DESCUENTO_GLOBALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_FACTURA_COMPRA() As String
            Get
                Return CType(Me(Me.tableCOMPRA.NUMERO_FACTURA_COMPRAColumn),String)
            End Get
            Set
                Me(Me.tableCOMPRA.NUMERO_FACTURA_COMPRAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PROVEEDOR() As Decimal
            Get
                Return CType(Me(Me.tableCOMPRA.ID_PROVEEDORColumn),Decimal)
            End Get
            Set
                Me(Me.tableCOMPRA.ID_PROVEEDORColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROVEEDORRow() As PROVEEDORRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_COMPRA_PROVEEDOR")),PROVEEDORRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_COMPRA_PROVEEDOR"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDETALLE_COMPRARows() As DETALLE_COMPRARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DETALLE_COMPRA_COMPRA")),DETALLE_COMPRARow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DETALLE_COMPRARow
        Inherits System.Data.DataRow
        
        Private tableDETALLE_COMPRA As DETALLE_COMPRADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDETALLE_COMPRA = CType(Me.Table,DETALLE_COMPRADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_DETALLE_COMPRA() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_COMPRA.ID_DETALLE_COMPRAColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_COMPRA.ID_DETALLE_COMPRAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_COMPRA() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_COMPRA.ID_COMPRAColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_COMPRA.ID_COMPRAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_COMPRA.CANTIDADColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_COMPRA.CANTIDADColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSTO_TOTAL() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_COMPRA.COSTO_TOTALColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_COMPRA.COSTO_TOTALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PRODUCTO() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_COMPRA.ID_PRODUCTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_COMPRA.ID_PRODUCTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSTO_UNIDAD() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_COMPRA.COSTO_UNIDADColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_COMPRA.COSTO_UNIDADColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPRARow() As COMPRARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DETALLE_COMPRA_COMPRA")),COMPRARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DETALLE_COMPRA_COMPRA"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTORow() As PRODUCTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DETALLE_COMPRA_PRODUCTO")),PRODUCTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DETALLE_COMPRA_PRODUCTO"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DETALLE_VENTARow
        Inherits System.Data.DataRow
        
        Private tableDETALLE_VENTA As DETALLE_VENTADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDETALLE_VENTA = CType(Me.Table,DETALLE_VENTADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_DETALLE_VENTA() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_VENTA.ID_DETALLE_VENTAColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_VENTA.ID_DETALLE_VENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_VENTA() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_VENTA.ID_VENTAColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_VENTA.ID_VENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_VENTA.CantidadColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_VENTA.CantidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_LOTE() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_VENTA.ID_LOTEColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_VENTA.ID_LOTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_IMPUESTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTA.ID_IMPUESTOColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ID_IMPUESTO' in table 'DETALLE_VENTA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTA.ID_IMPUESTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_HISTORICO_IMPUESTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTA.ID_HISTORICO_IMPUESTOColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ID_HISTORICO_IMPUESTO' in table 'DETALLE_VENTA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTA.ID_HISTORICO_IMPUESTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PRODUCTO() As Decimal
            Get
                Return CType(Me(Me.tableDETALLE_VENTA.ID_PRODUCTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableDETALLE_VENTA.ID_PRODUCTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HISTORICO_IMPUESTORowParent() As HISTORICO_IMPUESTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DETALLE_VENTA_HISTORICO_IMPUESTO")),HISTORICO_IMPUESTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DETALLE_VENTA_HISTORICO_IMPUESTO"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOTERowParent() As LOTERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DETALLE_VENTA_LOTE")),LOTERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DETALLE_VENTA_LOTE"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENTARow() As VENTARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DETALLE_VENTA_VENTA")),VENTARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DETALLE_VENTA_VENTA"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_IMPUESTONull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTA.ID_IMPUESTOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_IMPUESTONull()
            Me(Me.tableDETALLE_VENTA.ID_IMPUESTOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_HISTORICO_IMPUESTONull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTA.ID_HISTORICO_IMPUESTOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_HISTORICO_IMPUESTONull()
            Me(Me.tableDETALLE_VENTA.ID_HISTORICO_IMPUESTOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EMPLEADORow
        Inherits System.Data.DataRow
        
        Private tableEMPLEADO As EMPLEADODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEMPLEADO = CType(Me.Table,EMPLEADODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_EMPLEADO() As Decimal
            Get
                Return CType(Me(Me.tableEMPLEADO.ID_EMPLEADOColumn),Decimal)
            End Get
            Set
                Me(Me.tableEMPLEADO.ID_EMPLEADOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableEMPLEADO.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableEMPLEADO.NOMBREColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APELLIDO() As String
            Get
                Return CType(Me(Me.tableEMPLEADO.APELLIDOColumn),String)
            End Get
            Set
                Me(Me.tableEMPLEADO.APELLIDOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_IDENTIDAD() As String
            Get
                Return CType(Me(Me.tableEMPLEADO.TIPO_IDENTIDADColumn),String)
            End Get
            Set
                Me(Me.tableEMPLEADO.TIPO_IDENTIDADColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _RIF_CI() As String
            Get
                Return CType(Me(Me.tableEMPLEADO._RIF_CIColumn),String)
            End Get
            Set
                Me(Me.tableEMPLEADO._RIF_CIColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TELEFONO() As String
            Get
                Return CType(Me(Me.tableEMPLEADO.TELEFONOColumn),String)
            End Get
            Set
                Me(Me.tableEMPLEADO.TELEFONOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEMPLEADO.MAILColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MAIL' in table 'EMPLEADO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLEADO.MAILColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAILNull() As Boolean
            Return Me.IsNull(Me.tableEMPLEADO.MAILColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAILNull()
            Me(Me.tableEMPLEADO.MAILColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetHISTORICO_EMPLEADORows() As HISTORICO_EMPLEADORow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_HISTORICO_EMPLEADO_EMPLEADO")),HISTORICO_EMPLEADORow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class HISTORICO_EMPLEADORow
        Inherits System.Data.DataRow
        
        Private tableHISTORICO_EMPLEADO As HISTORICO_EMPLEADODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHISTORICO_EMPLEADO = CType(Me.Table,HISTORICO_EMPLEADODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_HISTORICO_EMPLEADO() As Decimal
            Get
                Return CType(Me(Me.tableHISTORICO_EMPLEADO.ID_HISTORICO_EMPLEADOColumn),Decimal)
            End Get
            Set
                Me(Me.tableHISTORICO_EMPLEADO.ID_HISTORICO_EMPLEADOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_EMPLEADO() As Decimal
            Get
                Return CType(Me(Me.tableHISTORICO_EMPLEADO.ID_EMPLEADOColumn),Decimal)
            End Get
            Set
                Me(Me.tableHISTORICO_EMPLEADO.ID_EMPLEADOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARGO() As String
            Get
                Return CType(Me(Me.tableHISTORICO_EMPLEADO.CARGOColumn),String)
            End Get
            Set
                Me(Me.tableHISTORICO_EMPLEADO.CARGOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUELDO() As Double
            Get
                Return CType(Me(Me.tableHISTORICO_EMPLEADO.SUELDOColumn),Double)
            End Get
            Set
                Me(Me.tableHISTORICO_EMPLEADO.SUELDOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_INGRESO() As Date
            Get
                Return CType(Me(Me.tableHISTORICO_EMPLEADO.FECHA_INGRESOColumn),Date)
            End Get
            Set
                Me(Me.tableHISTORICO_EMPLEADO.FECHA_INGRESOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_FIN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableHISTORICO_EMPLEADO.FECHA_FINColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FECHA_FIN' in table 'HISTORICO_EMPLEADO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHISTORICO_EMPLEADO.FECHA_FINColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JUSTIFICACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableHISTORICO_EMPLEADO.JUSTIFICACIONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'JUSTIFICACION' in table 'HISTORICO_EMPLEADO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHISTORICO_EMPLEADO.JUSTIFICACIONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPLEADORow() As EMPLEADORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_HISTORICO_EMPLEADO_EMPLEADO")),EMPLEADORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_HISTORICO_EMPLEADO_EMPLEADO"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_FINNull() As Boolean
            Return Me.IsNull(Me.tableHISTORICO_EMPLEADO.FECHA_FINColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_FINNull()
            Me(Me.tableHISTORICO_EMPLEADO.FECHA_FINColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJUSTIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableHISTORICO_EMPLEADO.JUSTIFICACIONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJUSTIFICACIONNull()
            Me(Me.tableHISTORICO_EMPLEADO.JUSTIFICACIONColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class HISTORICO_IMPUESTORow
        Inherits System.Data.DataRow
        
        Private tableHISTORICO_IMPUESTO As HISTORICO_IMPUESTODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHISTORICO_IMPUESTO = CType(Me.Table,HISTORICO_IMPUESTODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_HISTORICO_IMPUESTO() As Decimal
            Get
                Return CType(Me(Me.tableHISTORICO_IMPUESTO.ID_HISTORICO_IMPUESTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableHISTORICO_IMPUESTO.ID_HISTORICO_IMPUESTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_IMPUESTO() As Decimal
            Get
                Return CType(Me(Me.tableHISTORICO_IMPUESTO.ID_IMPUESTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableHISTORICO_IMPUESTO.ID_IMPUESTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_INICIO() As Date
            Get
                Return CType(Me(Me.tableHISTORICO_IMPUESTO.FECHA_INICIOColumn),Date)
            End Get
            Set
                Me(Me.tableHISTORICO_IMPUESTO.FECHA_INICIOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_FIN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableHISTORICO_IMPUESTO.FECHA_FINColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FECHA_FIN' in table 'HISTORICO_IMPUESTO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHISTORICO_IMPUESTO.FECHA_FINColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALOR() As Double
            Get
                Return CType(Me(Me.tableHISTORICO_IMPUESTO.VALORColumn),Double)
            End Get
            Set
                Me(Me.tableHISTORICO_IMPUESTO.VALORColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableHISTORICO_IMPUESTO.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableHISTORICO_IMPUESTO.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPUESTORow() As IMPUESTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_HISTORICO_IMPUESTO_IMPUESTO")),IMPUESTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_HISTORICO_IMPUESTO_IMPUESTO"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_FINNull() As Boolean
            Return Me.IsNull(Me.tableHISTORICO_IMPUESTO.FECHA_FINColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_FINNull()
            Me(Me.tableHISTORICO_IMPUESTO.FECHA_FINColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDETALLE_VENTARows() As DETALLE_VENTARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DETALLE_VENTA_HISTORICO_IMPUESTO")),DETALLE_VENTARow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMPUESTORow
        Inherits System.Data.DataRow
        
        Private tableIMPUESTO As IMPUESTODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMPUESTO = CType(Me.Table,IMPUESTODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_IMPUESTO() As Decimal
            Get
                Return CType(Me(Me.tableIMPUESTO.ID_IMPUESTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIMPUESTO.ID_IMPUESTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As Date
            Get
                Return CType(Me(Me.tableIMPUESTO.NombreColumn),Date)
            End Get
            Set
                Me(Me.tableIMPUESTO.NombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tableIMPUESTO.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableIMPUESTO.DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetHISTORICO_IMPUESTORows() As HISTORICO_IMPUESTORow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_HISTORICO_IMPUESTO_IMPUESTO")),HISTORICO_IMPUESTORow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LOTERow
        Inherits System.Data.DataRow
        
        Private tableLOTE As LOTEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOTE = CType(Me.Table,LOTEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_LOTE() As Decimal
            Get
                Return CType(Me(Me.tableLOTE.ID_LOTEColumn),Decimal)
            End Get
            Set
                Me(Me.tableLOTE.ID_LOTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As Decimal
            Get
                Return CType(Me(Me.tableLOTE.CANTIDADColumn),Decimal)
            End Get
            Set
                Me(Me.tableLOTE.CANTIDADColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VENCIMIENTO() As Date
            Get
                Return CType(Me(Me.tableLOTE.FECHA_VENCIMIENTOColumn),Date)
            End Get
            Set
                Me(Me.tableLOTE.FECHA_VENCIMIENTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PVP() As Double
            Get
                Return CType(Me(Me.tableLOTE.PVPColumn),Double)
            End Get
            Set
                Me(Me.tableLOTE.PVPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCUENTO() As Double
            Get
                Return CType(Me(Me.tableLOTE.DESCUENTOColumn),Double)
            End Get
            Set
                Me(Me.tableLOTE.DESCUENTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PRODUCTO() As Decimal
            Get
                Return CType(Me(Me.tableLOTE.ID_PRODUCTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableLOTE.ID_PRODUCTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTORow() As PRODUCTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_LOTE_PRODUCTO")),PRODUCTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_LOTE_PRODUCTO"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDETALLE_VENTARows() As DETALLE_VENTARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DETALLE_VENTA_LOTE")),DETALLE_VENTARow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OTROS_GASTOSRow
        Inherits System.Data.DataRow
        
        Private tableOTROS_GASTOS As OTROS_GASTOSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTROS_GASTOS = CType(Me.Table,OTROS_GASTOSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_OTROS_GASTOS() As Decimal
            Get
                Return CType(Me(Me.tableOTROS_GASTOS.ID_OTROS_GASTOSColumn),Decimal)
            End Get
            Set
                Me(Me.tableOTROS_GASTOS.ID_OTROS_GASTOSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONTO() As Double
            Get
                Return CType(Me(Me.tableOTROS_GASTOS.MONTOColumn),Double)
            End Get
            Set
                Me(Me.tableOTROS_GASTOS.MONTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As Date
            Get
                Return CType(Me(Me.tableOTROS_GASTOS.FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableOTROS_GASTOS.FECHAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As Double
            Get
                Return CType(Me(Me.tableOTROS_GASTOS.DESCRIPCIONColumn),Double)
            End Get
            Set
                Me(Me.tableOTROS_GASTOS.DESCRIPCIONColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRODUCTORow
        Inherits System.Data.DataRow
        
        Private tablePRODUCTO As PRODUCTODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRODUCTO = CType(Me.Table,PRODUCTODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PRODUCTO() As Decimal
            Get
                Return CType(Me(Me.tablePRODUCTO.ID_PRODUCTOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRODUCTO.ID_PRODUCTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tablePRODUCTO.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTO.NOMBREColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_DE_BARRAS() As String
            Get
                Return CType(Me(Me.tablePRODUCTO.CODIGO_DE_BARRASColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTO.CODIGO_DE_BARRASColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO() As String
            Get
                Return CType(Me(Me.tablePRODUCTO.CODIGOColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTO.CODIGOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tablePRODUCTO.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTO.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GRAVADO_EXENTO() As String
            Get
                Return CType(Me(Me.tablePRODUCTO.GRAVADO_EXENTOColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTO.GRAVADO_EXENTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_LINEA() As Decimal
            Get
                Return CType(Me(Me.tablePRODUCTO.ID_LINEAColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRODUCTO.ID_LINEAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDADES_POR_PAQUETE() As Decimal
            Get
                Return CType(Me(Me.tablePRODUCTO.UNIDADES_POR_PAQUETEColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRODUCTO.UNIDADES_POR_PAQUETEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LINEARow() As LINEARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PRODUCTO_LINEA")),LINEARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PRODUCTO_LINEA"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDETALLE_COMPRARows() As DETALLE_COMPRARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DETALLE_COMPRA_PRODUCTO")),DETALLE_COMPRARow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLOTERows() As LOTERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_LOTE_PRODUCTO")),LOTERow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPROVEEDOR_PRODUCTORows() As PROVEEDOR_PRODUCTORow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PROVEEDOR_PRODUCTO_PRODUCTO")),PROVEEDOR_PRODUCTORow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPEDIDO_FRECUENTERows() As PEDIDO_FRECUENTERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE")),PEDIDO_FRECUENTERow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PROVEEDORRow
        Inherits System.Data.DataRow
        
        Private tablePROVEEDOR As PROVEEDORDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROVEEDOR = CType(Me.Table,PROVEEDORDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PROVEEDOR() As Decimal
            Get
                Return CType(Me(Me.tablePROVEEDOR.ID_PROVEEDORColumn),Decimal)
            End Get
            Set
                Me(Me.tablePROVEEDOR.ID_PROVEEDORColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Return CType(Me(Me.tablePROVEEDOR.CodigoColumn),String)
            End Get
            Set
                Me(Me.tablePROVEEDOR.CodigoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIF() As String
            Get
                Return CType(Me(Me.tablePROVEEDOR.RIFColumn),String)
            End Get
            Set
                Me(Me.tablePROVEEDOR.RIFColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablePROVEEDOR.NombreColumn),String)
            End Get
            Set
                Me(Me.tablePROVEEDOR.NombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mail() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROVEEDOR.MailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Mail' in table 'PROVEEDOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVEEDOR.MailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ciudad() As String
            Get
                Return CType(Me(Me.tablePROVEEDOR.CiudadColumn),String)
            End Get
            Set
                Me(Me.tablePROVEEDOR.CiudadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Return CType(Me(Me.tablePROVEEDOR.DireccionColumn),String)
            End Get
            Set
                Me(Me.tablePROVEEDOR.DireccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Double
            Get
                Return CType(Me(Me.tablePROVEEDOR.SaldoColumn),Double)
            End Get
            Set
                Me(Me.tablePROVEEDOR.SaldoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estatus() As String
            Get
                Return CType(Me(Me.tablePROVEEDOR.EstatusColumn),String)
            End Get
            Set
                Me(Me.tablePROVEEDOR.EstatusColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMailNull() As Boolean
            Return Me.IsNull(Me.tablePROVEEDOR.MailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMailNull()
            Me(Me.tablePROVEEDOR.MailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCOMPRARows() As COMPRARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_COMPRA_PROVEEDOR")),COMPRARow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPROVEEDOR_PRODUCTORows() As PROVEEDOR_PRODUCTORow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PROVEEDOR_PRODUCTO_PROVEEDOR")),PROVEEDOR_PRODUCTORow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTELEFONO_PROVEEDORRows() As TELEFONO_PROVEEDORRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TELEFONO_PROVEEDOR_PROVEEDOR")),TELEFONO_PROVEEDORRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PROVEEDOR_PRODUCTORow
        Inherits System.Data.DataRow
        
        Private tablePROVEEDOR_PRODUCTO As PROVEEDOR_PRODUCTODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROVEEDOR_PRODUCTO = CType(Me.Table,PROVEEDOR_PRODUCTODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PROVEEDOR() As Decimal
            Get
                Return CType(Me(Me.tablePROVEEDOR_PRODUCTO.ID_PROVEEDORColumn),Decimal)
            End Get
            Set
                Me(Me.tablePROVEEDOR_PRODUCTO.ID_PROVEEDORColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PRODUCTO() As Decimal
            Get
                Return CType(Me(Me.tablePROVEEDOR_PRODUCTO.ID_PRODUCTOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePROVEEDOR_PRODUCTO.ID_PRODUCTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTORow() As PRODUCTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PROVEEDOR_PRODUCTO_PRODUCTO")),PRODUCTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PROVEEDOR_PRODUCTO_PRODUCTO"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROVEEDORRow() As PROVEEDORRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PROVEEDOR_PRODUCTO_PROVEEDOR")),PROVEEDORRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PROVEEDOR_PRODUCTO_PROVEEDOR"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TELEFONO_PROVEEDORRow
        Inherits System.Data.DataRow
        
        Private tableTELEFONO_PROVEEDOR As TELEFONO_PROVEEDORDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTELEFONO_PROVEEDOR = CType(Me.Table,TELEFONO_PROVEEDORDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_TELEFONO_PROVEEDOR() As Decimal
            Get
                Return CType(Me(Me.tableTELEFONO_PROVEEDOR.ID_TELEFONO_PROVEEDORColumn),Decimal)
            End Get
            Set
                Me(Me.tableTELEFONO_PROVEEDOR.ID_TELEFONO_PROVEEDORColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PROVEEDOR() As Decimal
            Get
                Return CType(Me(Me.tableTELEFONO_PROVEEDOR.ID_PROVEEDORColumn),Decimal)
            End Get
            Set
                Me(Me.tableTELEFONO_PROVEEDOR.ID_PROVEEDORColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_DE_AREA() As String
            Get
                Return CType(Me(Me.tableTELEFONO_PROVEEDOR.CODIGO_DE_AREAColumn),String)
            End Get
            Set
                Me(Me.tableTELEFONO_PROVEEDOR.CODIGO_DE_AREAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO() As String
            Get
                Return CType(Me(Me.tableTELEFONO_PROVEEDOR.NUMEROColumn),String)
            End Get
            Set
                Me(Me.tableTELEFONO_PROVEEDOR.NUMEROColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROVEEDORRow() As PROVEEDORRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TELEFONO_PROVEEDOR_PROVEEDOR")),PROVEEDORRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TELEFONO_PROVEEDOR_PROVEEDOR"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VENTARow
        Inherits System.Data.DataRow
        
        Private tableVENTA As VENTADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVENTA = CType(Me.Table,VENTADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_VENTA() As Decimal
            Get
                Return CType(Me(Me.tableVENTA.ID_VENTAColumn),Decimal)
            End Get
            Set
                Me(Me.tableVENTA.ID_VENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_FACTURA() As String
            Get
                Return CType(Me(Me.tableVENTA.NUMERO_FACTURAColumn),String)
            End Get
            Set
                Me(Me.tableVENTA.NUMERO_FACTURAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As Date
            Get
                Return CType(Me(Me.tableVENTA.FECHAColumn),Date)
            End Get
            Set
                Me(Me.tableVENTA.FECHAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENCE() As Date
            Get
                Return CType(Me(Me.tableVENTA.VENCEColumn),Date)
            End Get
            Set
                Me(Me.tableVENTA.VENCEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCUENTO() As Double
            Get
                Return CType(Me(Me.tableVENTA.DESCUENTOColumn),Double)
            End Get
            Set
                Me(Me.tableVENTA.DESCUENTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_PAGO() As String
            Get
                Return CType(Me(Me.tableVENTA.TIPO_PAGOColumn),String)
            End Get
            Set
                Me(Me.tableVENTA.TIPO_PAGOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_T_CHEQ() As String
            Get
                Return CType(Me(Me.tableVENTA.NUMERO_T_CHEQColumn),String)
            End Get
            Set
                Me(Me.tableVENTA.NUMERO_T_CHEQColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_CLIENTE() As Decimal
            Get
                Return CType(Me(Me.tableVENTA.ID_CLIENTEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVENTA.ID_CLIENTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTERow() As CLIENTERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_VENTA_CLIENTE")),CLIENTERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_VENTA_CLIENTE"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDETALLE_VENTARows() As DETALLE_VENTARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DETALLE_VENTA_VENTA")),DETALLE_VENTARow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PEDIDO_FRECUENTERow
        Inherits System.Data.DataRow
        
        Private tablePEDIDO_FRECUENTE As PEDIDO_FRECUENTEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePEDIDO_FRECUENTE = CType(Me.Table,PEDIDO_FRECUENTEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PEDIDO() As Decimal
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.ID_PEDIDOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.ID_PEDIDOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_PEDIDO() As String
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.NUMERO_PEDIDOColumn),String)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.NUMERO_PEDIDOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_INICIO() As Date
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.FECHA_INICIOColumn),Date)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.FECHA_INICIOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_FIN() As Date
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.FECHA_FINColumn),Date)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.FECHA_FINColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ULTIMA_COMPRA() As Date
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.FECHA_ULTIMA_COMPRAColumn),Date)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.FECHA_ULTIMA_COMPRAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD_DIARIA() As Decimal
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.CANTIDAD_DIARIAColumn),Decimal)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.CANTIDAD_DIARIAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PRODUCTO() As Decimal
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.ID_PRODUCTOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.ID_PRODUCTOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_CLIENTE() As Decimal
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.ID_CLIENTEColumn),Decimal)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.ID_CLIENTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTATUS() As String
            Get
                Return CType(Me(Me.tablePEDIDO_FRECUENTE.ESTATUSColumn),String)
            End Get
            Set
                Me(Me.tablePEDIDO_FRECUENTE.ESTATUSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTORow() As PRODUCTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE")),PRODUCTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTERow() As CLIENTERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1")),CLIENTERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CLIENTERow
        Inherits System.Data.DataRow
        
        Private tableCLIENTE As CLIENTEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCLIENTE = CType(Me.Table,CLIENTEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_CLIENTE() As Decimal
            Get
                Return CType(Me(Me.tableCLIENTE.ID_CLIENTEColumn),Decimal)
            End Get
            Set
                Me(Me.tableCLIENTE.ID_CLIENTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_IDENTIDAD() As String
            Get
                Return CType(Me(Me.tableCLIENTE.TIPO_IDENTIDADColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.TIPO_IDENTIDADColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOCUMENTO_IDENTIDAD() As String
            Get
                Return CType(Me(Me.tableCLIENTE.DOCUMENTO_IDENTIDADColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.DOCUMENTO_IDENTIDADColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableCLIENTE.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.NOMBREColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APELLIDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCLIENTE.APELLIDOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'APELLIDO' in table 'CLIENTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCLIENTE.APELLIDOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TELEFONO() As String
            Get
                Return CType(Me(Me.tableCLIENTE.TELEFONOColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.TELEFONOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIRECCION() As String
            Get
                Return CType(Me(Me.tableCLIENTE.DIRECCIONColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.DIRECCIONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPELLIDONull() As Boolean
            Return Me.IsNull(Me.tableCLIENTE.APELLIDOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPELLIDONull()
            Me(Me.tableCLIENTE.APELLIDOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVENTARows() As VENTARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_VENTA_CLIENTE")),VENTARow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPEDIDO_FRECUENTERows() As PEDIDO_FRECUENTERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PEDIDO_FRECUENTE_PEDIDO_FRECUENTE1")),PEDIDO_FRECUENTERow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LINEARow
        Inherits System.Data.DataRow
        
        Private tableLINEA As LINEADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLINEA = CType(Me.Table,LINEADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_LINEA() As Decimal
            Get
                Return CType(Me(Me.tableLINEA.ID_LINEAColumn),Decimal)
            End Get
            Set
                Me(Me.tableLINEA.ID_LINEAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableLINEA.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableLINEA.NOMBREColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableLINEA.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableLINEA.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCUENTO_MAXIMO() As Double
            Get
                Return CType(Me(Me.tableLINEA.DESCUENTO_MAXIMOColumn),Double)
            End Get
            Set
                Me(Me.tableLINEA.DESCUENTO_MAXIMOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MARGEN_UTIL() As Double
            Get
                Return CType(Me(Me.tableLINEA.MARGEN_UTILColumn),Double)
            End Get
            Set
                Me(Me.tableLINEA.MARGEN_UTILColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPRODUCTORows() As PRODUCTORow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PRODUCTO_LINEA")),PRODUCTORow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COMPRARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As COMPRARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COMPRARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COMPRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DETALLE_COMPRARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DETALLE_COMPRARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DETALLE_COMPRARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DETALLE_COMPRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DETALLE_VENTARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DETALLE_VENTARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DETALLE_VENTARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DETALLE_VENTARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EMPLEADORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As EMPLEADORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EMPLEADORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EMPLEADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class HISTORICO_EMPLEADORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As HISTORICO_EMPLEADORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As HISTORICO_EMPLEADORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As HISTORICO_EMPLEADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class HISTORICO_IMPUESTORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As HISTORICO_IMPUESTORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As HISTORICO_IMPUESTORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As HISTORICO_IMPUESTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMPUESTORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As IMPUESTORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMPUESTORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMPUESTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LOTERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As LOTERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LOTERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LOTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OTROS_GASTOSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As OTROS_GASTOSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OTROS_GASTOSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OTROS_GASTOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRODUCTORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PRODUCTORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRODUCTORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRODUCTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PROVEEDORRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PROVEEDORRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PROVEEDORRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PROVEEDORRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PROVEEDOR_PRODUCTORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PROVEEDOR_PRODUCTORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PROVEEDOR_PRODUCTORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PROVEEDOR_PRODUCTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TELEFONO_PROVEEDORRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TELEFONO_PROVEEDORRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TELEFONO_PROVEEDORRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TELEFONO_PROVEEDORRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VENTARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As VENTARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VENTARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VENTARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PEDIDO_FRECUENTERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PEDIDO_FRECUENTERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PEDIDO_FRECUENTERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PEDIDO_FRECUENTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CLIENTERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CLIENTERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CLIENTERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CLIENTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LINEARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As LINEARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LINEARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LINEARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace FarmaciaSJDataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class COMPRATableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COMPRA"
            tableMapping.ColumnMappings.Add("ID_COMPRA", "ID_COMPRA")
            tableMapping.ColumnMappings.Add("FECHA_COMPRA", "FECHA_COMPRA")
            tableMapping.ColumnMappings.Add("VENCE", "VENCE")
            tableMapping.ColumnMappings.Add("MONTO", "MONTO")
            tableMapping.ColumnMappings.Add("DESCUENTO_GLOBAL", "DESCUENTO_GLOBAL")
            tableMapping.ColumnMappings.Add("NUMERO_FACTURA_COMPRA", "NUMERO_FACTURA_COMPRA")
            tableMapping.ColumnMappings.Add("ID_PROVEEDOR", "ID_PROVEEDOR")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[COMPRA] WHERE (([ID_COMPRA] = @Original_ID_COMPRA) AND ([FECHA"& _ 
                "_COMPRA] = @Original_FECHA_COMPRA) AND ([VENCE] = @Original_VENCE) AND ([MONTO] "& _ 
                "= @Original_MONTO) AND ([DESCUENTO_GLOBAL] = @Original_DESCUENTO_GLOBAL) AND ([I"& _ 
                "D_PROVEEDOR] = @Original_ID_PROVEEDOR))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_COMPRA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_VENCE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VENCE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MONTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "MONTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DESCUENTO_GLOBAL", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO_GLOBAL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[COMPRA] ([FECHA_COMPRA], [VENCE], [MONTO], [DESCUENTO_GLOBAL],"& _ 
                " [NUMERO_FACTURA_COMPRA], [ID_PROVEEDOR]) VALUES (@FECHA_COMPRA, @VENCE, @MONTO,"& _ 
                " @DESCUENTO_GLOBAL, @NUMERO_FACTURA_COMPRA, @ID_PROVEEDOR);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_COMPRA, F"& _ 
                "ECHA_COMPRA, VENCE, MONTO, DESCUENTO_GLOBAL, NUMERO_FACTURA_COMPRA, ID_PROVEEDOR"& _ 
                " FROM COMPRA WHERE (ID_COMPRA = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_COMPRA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@VENCE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VENCE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MONTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "MONTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCUENTO_GLOBAL", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO_GLOBAL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO_FACTURA_COMPRA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO_FACTURA_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[COMPRA] SET [FECHA_COMPRA] = @FECHA_COMPRA, [VENCE] = @VENCE, [MONT"& _ 
                "O] = @MONTO, [DESCUENTO_GLOBAL] = @DESCUENTO_GLOBAL, [NUMERO_FACTURA_COMPRA] = @"& _ 
                "NUMERO_FACTURA_COMPRA, [ID_PROVEEDOR] = @ID_PROVEEDOR WHERE (([ID_COMPRA] = @Ori"& _ 
                "ginal_ID_COMPRA) AND ([FECHA_COMPRA] = @Original_FECHA_COMPRA) AND ([VENCE] = @O"& _ 
                "riginal_VENCE) AND ([MONTO] = @Original_MONTO) AND ([DESCUENTO_GLOBAL] = @Origin"& _ 
                "al_DESCUENTO_GLOBAL) AND ([ID_PROVEEDOR] = @Original_ID_PROVEEDOR));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_"& _ 
                "COMPRA, FECHA_COMPRA, VENCE, MONTO, DESCUENTO_GLOBAL, NUMERO_FACTURA_COMPRA, ID_"& _ 
                "PROVEEDOR FROM COMPRA WHERE (ID_COMPRA = @ID_COMPRA)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_COMPRA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@VENCE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VENCE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MONTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "MONTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCUENTO_GLOBAL", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO_GLOBAL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO_FACTURA_COMPRA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO_FACTURA_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_COMPRA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_VENCE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VENCE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MONTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "MONTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DESCUENTO_GLOBAL", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO_GLOBAL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_COMPRA", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_COMPRA, FECHA_COMPRA, VENCE, MONTO, DESCUENTO_GLOBAL, NUMERO_FACTURA_CO"& _ 
                "MPRA, ID_PROVEEDOR FROM dbo.COMPRA"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.COMPRADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.COMPRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.COMPRADataTable = New FarmaciaSJDataSet.COMPRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.COMPRADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "COMPRA")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_COMPRA As Decimal, ByVal Original_FECHA_COMPRA As Date, ByVal Original_VENCE As Date, ByVal Original_MONTO As Double, ByVal Original_DESCUENTO_GLOBAL As Double, ByVal Original_ID_PROVEEDOR As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_COMPRA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA_COMPRA,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_VENCE,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MONTO,Double)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DESCUENTO_GLOBAL,Double)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_PROVEEDOR,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FECHA_COMPRA As Date, ByVal VENCE As Date, ByVal MONTO As Double, ByVal DESCUENTO_GLOBAL As Double, ByVal NUMERO_FACTURA_COMPRA As String, ByVal ID_PROVEEDOR As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FECHA_COMPRA,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(VENCE,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(MONTO,Double)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DESCUENTO_GLOBAL,Double)
            If (NUMERO_FACTURA_COMPRA Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO_FACTURA_COMPRA")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(NUMERO_FACTURA_COMPRA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_PROVEEDOR,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FECHA_COMPRA As Date, ByVal VENCE As Date, ByVal MONTO As Double, ByVal DESCUENTO_GLOBAL As Double, ByVal NUMERO_FACTURA_COMPRA As String, ByVal ID_PROVEEDOR As Decimal, ByVal Original_ID_COMPRA As Decimal, ByVal Original_FECHA_COMPRA As Date, ByVal Original_VENCE As Date, ByVal Original_MONTO As Double, ByVal Original_DESCUENTO_GLOBAL As Double, ByVal Original_ID_PROVEEDOR As Decimal, ByVal ID_COMPRA As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FECHA_COMPRA,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(VENCE,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MONTO,Double)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DESCUENTO_GLOBAL,Double)
            If (NUMERO_FACTURA_COMPRA Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO_FACTURA_COMPRA")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(NUMERO_FACTURA_COMPRA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_PROVEEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID_COMPRA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FECHA_COMPRA,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_VENCE,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MONTO,Double)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_DESCUENTO_GLOBAL,Double)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ID_PROVEEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ID_COMPRA,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DETALLE_COMPRATableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DETALLE_COMPRA"
            tableMapping.ColumnMappings.Add("ID_DETALLE_COMPRA", "ID_DETALLE_COMPRA")
            tableMapping.ColumnMappings.Add("ID_COMPRA", "ID_COMPRA")
            tableMapping.ColumnMappings.Add("CANTIDAD", "CANTIDAD")
            tableMapping.ColumnMappings.Add("COSTO_TOTAL", "COSTO_TOTAL")
            tableMapping.ColumnMappings.Add("ID_PRODUCTO", "ID_PRODUCTO")
            tableMapping.ColumnMappings.Add("COSTO_UNIDAD", "COSTO_UNIDAD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DETALLE_COMPRA] WHERE (([ID_DETALLE_COMPRA] = @Original_ID_DET"& _ 
                "ALLE_COMPRA) AND ([ID_COMPRA] = @Original_ID_COMPRA) AND ([CANTIDAD] = @Original"& _ 
                "_CANTIDAD) AND ([COSTO_TOTAL] = @Original_COSTO_TOTAL) AND ([ID_PRODUCTO] = @Ori"& _ 
                "ginal_ID_PRODUCTO) AND ([COSTO_UNIDAD] = @Original_COSTO_UNIDAD))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_DETALLE_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_DETALLE_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CANTIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSTO_TOTAL", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "COSTO_TOTAL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSTO_UNIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "COSTO_UNIDAD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DETALLE_COMPRA] ([ID_DETALLE_COMPRA], [ID_COMPRA], [CANTIDAD],"& _ 
                " [COSTO_TOTAL], [ID_PRODUCTO], [COSTO_UNIDAD]) VALUES (@ID_DETALLE_COMPRA, @ID_C"& _ 
                "OMPRA, @CANTIDAD, @COSTO_TOTAL, @ID_PRODUCTO, @COSTO_UNIDAD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_DETALLE"& _ 
                "_COMPRA, ID_COMPRA, CANTIDAD, COSTO_TOTAL, ID_PRODUCTO, COSTO_UNIDAD FROM DETALL"& _ 
                "E_COMPRA WHERE (ID_COMPRA = @ID_COMPRA) AND (ID_DETALLE_COMPRA = @ID_DETALLE_COM"& _ 
                "PRA)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_DETALLE_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_DETALLE_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CANTIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSTO_TOTAL", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "COSTO_TOTAL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSTO_UNIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "COSTO_UNIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DETALLE_COMPRA] SET [ID_DETALLE_COMPRA] = @ID_DETALLE_COMPRA, [ID_C"& _ 
                "OMPRA] = @ID_COMPRA, [CANTIDAD] = @CANTIDAD, [COSTO_TOTAL] = @COSTO_TOTAL, [ID_P"& _ 
                "RODUCTO] = @ID_PRODUCTO, [COSTO_UNIDAD] = @COSTO_UNIDAD WHERE (([ID_DETALLE_COMP"& _ 
                "RA] = @Original_ID_DETALLE_COMPRA) AND ([ID_COMPRA] = @Original_ID_COMPRA) AND ("& _ 
                "[CANTIDAD] = @Original_CANTIDAD) AND ([COSTO_TOTAL] = @Original_COSTO_TOTAL) AND"& _ 
                " ([ID_PRODUCTO] = @Original_ID_PRODUCTO) AND ([COSTO_UNIDAD] = @Original_COSTO_U"& _ 
                "NIDAD));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_DETALLE_COMPRA, ID_COMPRA, CANTIDAD, COSTO_TOTAL, ID_PRODUCT"& _ 
                "O, COSTO_UNIDAD FROM DETALLE_COMPRA WHERE (ID_COMPRA = @ID_COMPRA) AND (ID_DETAL"& _ 
                "LE_COMPRA = @ID_DETALLE_COMPRA)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_DETALLE_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_DETALLE_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CANTIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSTO_TOTAL", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "COSTO_TOTAL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSTO_UNIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "COSTO_UNIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_DETALLE_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_DETALLE_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_COMPRA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CANTIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSTO_TOTAL", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "COSTO_TOTAL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSTO_UNIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "COSTO_UNIDAD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_DETALLE_COMPRA, ID_COMPRA, CANTIDAD, COSTO_TOTAL, ID_PRODUCTO, COSTO_UN"& _ 
                "IDAD FROM dbo.DETALLE_COMPRA"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.DETALLE_COMPRADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.DETALLE_COMPRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.DETALLE_COMPRADataTable = New FarmaciaSJDataSet.DETALLE_COMPRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.DETALLE_COMPRADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DETALLE_COMPRA")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_DETALLE_COMPRA As Decimal, ByVal Original_ID_COMPRA As Decimal, ByVal Original_CANTIDAD As Decimal, ByVal Original_COSTO_TOTAL As Decimal, ByVal Original_ID_PRODUCTO As Decimal, ByVal Original_COSTO_UNIDAD As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_DETALLE_COMPRA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID_COMPRA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CANTIDAD,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COSTO_TOTAL,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ID_PRODUCTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COSTO_UNIDAD,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_DETALLE_COMPRA As Decimal, ByVal ID_COMPRA As Decimal, ByVal CANTIDAD As Decimal, ByVal COSTO_TOTAL As Decimal, ByVal ID_PRODUCTO As Decimal, ByVal COSTO_UNIDAD As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_DETALLE_COMPRA,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_COMPRA,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CANTIDAD,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(COSTO_TOTAL,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_PRODUCTO,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(COSTO_UNIDAD,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_DETALLE_COMPRA As Decimal, ByVal ID_COMPRA As Decimal, ByVal CANTIDAD As Decimal, ByVal COSTO_TOTAL As Decimal, ByVal ID_PRODUCTO As Decimal, ByVal COSTO_UNIDAD As Decimal, ByVal Original_ID_DETALLE_COMPRA As Decimal, ByVal Original_ID_COMPRA As Decimal, ByVal Original_CANTIDAD As Decimal, ByVal Original_COSTO_TOTAL As Decimal, ByVal Original_ID_PRODUCTO As Decimal, ByVal Original_COSTO_UNIDAD As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_DETALLE_COMPRA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_COMPRA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CANTIDAD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COSTO_TOTAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_PRODUCTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(COSTO_UNIDAD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID_DETALLE_COMPRA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_COMPRA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CANTIDAD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_COSTO_TOTAL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID_PRODUCTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_COSTO_UNIDAD,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DETALLE_VENTATableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DETALLE_VENTA"
            tableMapping.ColumnMappings.Add("ID_DETALLE_VENTA", "ID_DETALLE_VENTA")
            tableMapping.ColumnMappings.Add("ID_VENTA", "ID_VENTA")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("ID_LOTE", "ID_LOTE")
            tableMapping.ColumnMappings.Add("ID_IMPUESTO", "ID_IMPUESTO")
            tableMapping.ColumnMappings.Add("ID_HISTORICO_IMPUESTO", "ID_HISTORICO_IMPUESTO")
            tableMapping.ColumnMappings.Add("ID_PRODUCTO", "ID_PRODUCTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DETALLE_VENTA] WHERE (([ID_DETALLE_VENTA] = @Original_ID_DETAL"& _ 
                "LE_VENTA) AND ([ID_VENTA] = @Original_ID_VENTA) AND ([Cantidad] = @Original_Cant"& _ 
                "idad) AND ([ID_LOTE] = @Original_ID_LOTE) AND ((@IsNull_ID_IMPUESTO = 1 AND [ID_"& _ 
                "IMPUESTO] IS NULL) OR ([ID_IMPUESTO] = @Original_ID_IMPUESTO)) AND ((@IsNull_ID_"& _ 
                "HISTORICO_IMPUESTO = 1 AND [ID_HISTORICO_IMPUESTO] IS NULL) OR ([ID_HISTORICO_IM"& _ 
                "PUESTO] = @Original_ID_HISTORICO_IMPUESTO)) AND ([ID_PRODUCTO] = @Original_ID_PR"& _ 
                "ODUCTO))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_DETALLE_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_DETALLE_VENTA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_VENTA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Cantidad", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "Cantidad", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_LOTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LOTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ID_IMPUESTO", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ID_HISTORICO_IMPUESTO", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_HISTORICO_IMPUESTO", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_HISTORICO_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DETALLE_VENTA] ([ID_DETALLE_VENTA], [ID_VENTA], [Cantidad], [I"& _ 
                "D_LOTE], [ID_IMPUESTO], [ID_HISTORICO_IMPUESTO], [ID_PRODUCTO]) VALUES (@ID_DETA"& _ 
                "LLE_VENTA, @ID_VENTA, @Cantidad, @ID_LOTE, @ID_IMPUESTO, @ID_HISTORICO_IMPUESTO,"& _ 
                " @ID_PRODUCTO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_DETALLE_VENTA, ID_VENTA, Cantidad, ID_LOTE, ID_IMPUES"& _ 
                "TO, ID_HISTORICO_IMPUESTO, ID_PRODUCTO FROM DETALLE_VENTA WHERE (ID_DETALLE_VENT"& _ 
                "A = @ID_DETALLE_VENTA) AND (ID_VENTA = @ID_VENTA)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_DETALLE_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_DETALLE_VENTA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_VENTA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Cantidad", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "Cantidad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_LOTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LOTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_HISTORICO_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_IMPUESTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DETALLE_VENTA] SET [ID_DETALLE_VENTA] = @ID_DETALLE_VENTA, [ID_VENT"& _ 
                "A] = @ID_VENTA, [Cantidad] = @Cantidad, [ID_LOTE] = @ID_LOTE, [ID_IMPUESTO] = @I"& _ 
                "D_IMPUESTO, [ID_HISTORICO_IMPUESTO] = @ID_HISTORICO_IMPUESTO, [ID_PRODUCTO] = @I"& _ 
                "D_PRODUCTO WHERE (([ID_DETALLE_VENTA] = @Original_ID_DETALLE_VENTA) AND ([ID_VEN"& _ 
                "TA] = @Original_ID_VENTA) AND ([Cantidad] = @Original_Cantidad) AND ([ID_LOTE] ="& _ 
                " @Original_ID_LOTE) AND ((@IsNull_ID_IMPUESTO = 1 AND [ID_IMPUESTO] IS NULL) OR "& _ 
                "([ID_IMPUESTO] = @Original_ID_IMPUESTO)) AND ((@IsNull_ID_HISTORICO_IMPUESTO = 1"& _ 
                " AND [ID_HISTORICO_IMPUESTO] IS NULL) OR ([ID_HISTORICO_IMPUESTO] = @Original_ID"& _ 
                "_HISTORICO_IMPUESTO)) AND ([ID_PRODUCTO] = @Original_ID_PRODUCTO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_D"& _ 
                "ETALLE_VENTA, ID_VENTA, Cantidad, ID_LOTE, ID_IMPUESTO, ID_HISTORICO_IMPUESTO, I"& _ 
                "D_PRODUCTO FROM DETALLE_VENTA WHERE (ID_DETALLE_VENTA = @ID_DETALLE_VENTA) AND ("& _ 
                "ID_VENTA = @ID_VENTA)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_DETALLE_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_DETALLE_VENTA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_VENTA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Cantidad", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "Cantidad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_LOTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LOTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_HISTORICO_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_IMPUESTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_DETALLE_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_DETALLE_VENTA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_VENTA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Cantidad", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "Cantidad", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_LOTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LOTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ID_IMPUESTO", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ID_HISTORICO_IMPUESTO", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_HISTORICO_IMPUESTO", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_HISTORICO_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_DETALLE_VENTA, ID_VENTA, Cantidad, ID_LOTE, ID_IMPUESTO, ID_HISTORICO_I"& _ 
                "MPUESTO, ID_PRODUCTO FROM dbo.DETALLE_VENTA"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.DETALLE_VENTADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.DETALLE_VENTADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.DETALLE_VENTADataTable = New FarmaciaSJDataSet.DETALLE_VENTADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.DETALLE_VENTADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DETALLE_VENTA")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_DETALLE_VENTA As Decimal, ByVal Original_ID_VENTA As Decimal, ByVal Original_Cantidad As Decimal, ByVal Original_ID_LOTE As Decimal, ByVal Original_ID_IMPUESTO As System.Nullable(Of Decimal), ByVal Original_ID_HISTORICO_IMPUESTO As System.Nullable(Of Decimal), ByVal Original_ID_PRODUCTO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_DETALLE_VENTA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID_VENTA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Cantidad,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ID_LOTE,Decimal)
            If (Original_ID_IMPUESTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_IMPUESTO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_ID_HISTORICO_IMPUESTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ID_HISTORICO_IMPUESTO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ID_PRODUCTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_DETALLE_VENTA As Decimal, ByVal ID_VENTA As Decimal, ByVal Cantidad As Decimal, ByVal ID_LOTE As Decimal, ByVal ID_IMPUESTO As System.Nullable(Of Decimal), ByVal ID_HISTORICO_IMPUESTO As System.Nullable(Of Decimal), ByVal ID_PRODUCTO As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_DETALLE_VENTA,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_VENTA,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Cantidad,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ID_LOTE,Decimal)
            If (ID_IMPUESTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_IMPUESTO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ID_HISTORICO_IMPUESTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_HISTORICO_IMPUESTO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(ID_PRODUCTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_DETALLE_VENTA As Decimal, ByVal ID_VENTA As Decimal, ByVal Cantidad As Decimal, ByVal ID_LOTE As Decimal, ByVal ID_IMPUESTO As System.Nullable(Of Decimal), ByVal ID_HISTORICO_IMPUESTO As System.Nullable(Of Decimal), ByVal ID_PRODUCTO As Decimal, ByVal Original_ID_DETALLE_VENTA As Decimal, ByVal Original_ID_VENTA As Decimal, ByVal Original_Cantidad As Decimal, ByVal Original_ID_LOTE As Decimal, ByVal Original_ID_IMPUESTO As System.Nullable(Of Decimal), ByVal Original_ID_HISTORICO_IMPUESTO As System.Nullable(Of Decimal), ByVal Original_ID_PRODUCTO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_DETALLE_VENTA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_VENTA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Cantidad,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ID_LOTE,Decimal)
            If (ID_IMPUESTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_IMPUESTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ID_HISTORICO_IMPUESTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_HISTORICO_IMPUESTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ID_PRODUCTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_DETALLE_VENTA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID_VENTA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Cantidad,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID_LOTE,Decimal)
            If (Original_ID_IMPUESTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ID_IMPUESTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_ID_HISTORICO_IMPUESTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ID_HISTORICO_IMPUESTO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ID_PRODUCTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EMPLEADOTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EMPLEADO"
            tableMapping.ColumnMappings.Add("ID_EMPLEADO", "ID_EMPLEADO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("APELLIDO", "APELLIDO")
            tableMapping.ColumnMappings.Add("TIPO_IDENTIDAD", "TIPO_IDENTIDAD")
            tableMapping.ColumnMappings.Add("RIF/CI", "RIF/CI")
            tableMapping.ColumnMappings.Add("TELEFONO", "TELEFONO")
            tableMapping.ColumnMappings.Add("MAIL", "MAIL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[EMPLEADO] WHERE (([ID_EMPLEADO] = @Original_ID_EMPLEADO))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_EMPLEADO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EMPLEADO] ([ID_EMPLEADO], [NOMBRE], [APELLIDO], [TIPO_IDENTIDA"& _ 
                "D], [RIF/CI], [TELEFONO], [MAIL]) VALUES (@ID_EMPLEADO, @NOMBRE, @APELLIDO, @TIP"& _ 
                "O_IDENTIDAD, @p1, @TELEFONO, @MAIL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_EMPLEADO, NOMBRE, APELLIDO, TIPO"& _ 
                "_IDENTIDAD, [RIF/CI], TELEFONO, MAIL FROM EMPLEADO WHERE (ID_EMPLEADO = @ID_EMPL"& _ 
                "EADO)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_EMPLEADO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NOMBRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@APELLIDO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "APELLIDO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TIPO_IDENTIDAD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TIPO_IDENTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@p1", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIF/CI", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TELEFONO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MAIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MAIL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[EMPLEADO] SET [ID_EMPLEADO] = @ID_EMPLEADO, [NOMBRE] = @NOMBRE, [AP"& _ 
                "ELLIDO] = @APELLIDO, [TIPO_IDENTIDAD] = @TIPO_IDENTIDAD, [RIF/CI] = @p1, [TELEFO"& _ 
                "NO] = @TELEFONO, [MAIL] = @MAIL WHERE (([ID_EMPLEADO] = @Original_ID_EMPLEADO));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_EMPLEADO, NOMBRE, APELLIDO, TIPO_IDENTIDAD, [RIF/CI], TELEFONO, MAIL"& _ 
                " FROM EMPLEADO WHERE (ID_EMPLEADO = @ID_EMPLEADO)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_EMPLEADO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NOMBRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@APELLIDO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "APELLIDO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TIPO_IDENTIDAD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TIPO_IDENTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@p1", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIF/CI", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TELEFONO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MAIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MAIL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_EMPLEADO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_EMPLEADO, NOMBRE, APELLIDO, TIPO_IDENTIDAD, [RIF/CI], TELEFONO, MAIL FR"& _ 
                "OM dbo.EMPLEADO"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.EMPLEADODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.EMPLEADODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.EMPLEADODataTable = New FarmaciaSJDataSet.EMPLEADODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.EMPLEADODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "EMPLEADO")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_EMPLEADO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_EMPLEADO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_EMPLEADO As Decimal, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal TIPO_IDENTIDAD As String, ByVal p1 As String, ByVal TELEFONO As String, ByVal MAIL As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_EMPLEADO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (APELLIDO Is Nothing) Then
                Throw New System.ArgumentNullException("APELLIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(APELLIDO,String)
            End If
            If (TIPO_IDENTIDAD Is Nothing) Then
                Throw New System.ArgumentNullException("TIPO_IDENTIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TIPO_IDENTIDAD,String)
            End If
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p1,String)
            End If
            If (TELEFONO Is Nothing) Then
                Throw New System.ArgumentNullException("TELEFONO")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TELEFONO,String)
            End If
            If (MAIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MAIL,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_EMPLEADO As Decimal, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal TIPO_IDENTIDAD As String, ByVal p1 As String, ByVal TELEFONO As String, ByVal MAIL As String, ByVal Original_ID_EMPLEADO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_EMPLEADO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (APELLIDO Is Nothing) Then
                Throw New System.ArgumentNullException("APELLIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(APELLIDO,String)
            End If
            If (TIPO_IDENTIDAD Is Nothing) Then
                Throw New System.ArgumentNullException("TIPO_IDENTIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TIPO_IDENTIDAD,String)
            End If
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p1,String)
            End If
            If (TELEFONO Is Nothing) Then
                Throw New System.ArgumentNullException("TELEFONO")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TELEFONO,String)
            End If
            If (MAIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MAIL,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_EMPLEADO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class HISTORICO_EMPLEADOTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "HISTORICO_EMPLEADO"
            tableMapping.ColumnMappings.Add("ID_HISTORICO_EMPLEADO", "ID_HISTORICO_EMPLEADO")
            tableMapping.ColumnMappings.Add("ID_EMPLEADO", "ID_EMPLEADO")
            tableMapping.ColumnMappings.Add("CARGO", "CARGO")
            tableMapping.ColumnMappings.Add("SUELDO", "SUELDO")
            tableMapping.ColumnMappings.Add("FECHA_INGRESO", "FECHA_INGRESO")
            tableMapping.ColumnMappings.Add("FECHA_FIN", "FECHA_FIN")
            tableMapping.ColumnMappings.Add("JUSTIFICACION", "JUSTIFICACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[HISTORICO_EMPLEADO] WHERE (([ID_HISTORICO_EMPLEADO] = @Origina"& _ 
                "l_ID_HISTORICO_EMPLEADO) AND ([ID_EMPLEADO] = @Original_ID_EMPLEADO) AND ([SUELD"& _ 
                "O] = @Original_SUELDO) AND ([FECHA_INGRESO] = @Original_FECHA_INGRESO) AND ((@Is"& _ 
                "Null_FECHA_FIN = 1 AND [FECHA_FIN] IS NULL) OR ([FECHA_FIN] = @Original_FECHA_FI"& _ 
                "N)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_HISTORICO_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_EMPLEADO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_EMPLEADO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SUELDO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SUELDO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_INGRESO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INGRESO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FECHA_FIN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HISTORICO_EMPLEADO] ([ID_HISTORICO_EMPLEADO], [ID_EMPLEADO], ["& _ 
                "CARGO], [SUELDO], [FECHA_INGRESO], [FECHA_FIN], [JUSTIFICACION]) VALUES (@ID_HIS"& _ 
                "TORICO_EMPLEADO, @ID_EMPLEADO, @CARGO, @SUELDO, @FECHA_INGRESO, @FECHA_FIN, @JUS"& _ 
                "TIFICACION);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_HISTORICO_EMPLEADO, ID_EMPLEADO, CARGO, SUELDO, FECHA_IN"& _ 
                "GRESO, FECHA_FIN, JUSTIFICACION FROM HISTORICO_EMPLEADO WHERE (ID_EMPLEADO = @ID"& _ 
                "_EMPLEADO) AND (ID_HISTORICO_EMPLEADO = @ID_HISTORICO_EMPLEADO)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_HISTORICO_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_EMPLEADO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_EMPLEADO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CARGO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CARGO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SUELDO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SUELDO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_INGRESO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INGRESO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@JUSTIFICACION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "JUSTIFICACION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[HISTORICO_EMPLEADO] SET [ID_HISTORICO_EMPLEADO] = @ID_HISTORICO_EMP"& _ 
                "LEADO, [ID_EMPLEADO] = @ID_EMPLEADO, [CARGO] = @CARGO, [SUELDO] = @SUELDO, [FECH"& _ 
                "A_INGRESO] = @FECHA_INGRESO, [FECHA_FIN] = @FECHA_FIN, [JUSTIFICACION] = @JUSTIF"& _ 
                "ICACION WHERE (([ID_HISTORICO_EMPLEADO] = @Original_ID_HISTORICO_EMPLEADO) AND ("& _ 
                "[ID_EMPLEADO] = @Original_ID_EMPLEADO) AND ([SUELDO] = @Original_SUELDO) AND ([F"& _ 
                "ECHA_INGRESO] = @Original_FECHA_INGRESO) AND ((@IsNull_FECHA_FIN = 1 AND [FECHA_"& _ 
                "FIN] IS NULL) OR ([FECHA_FIN] = @Original_FECHA_FIN)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_HISTORICO_EMP"& _ 
                "LEADO, ID_EMPLEADO, CARGO, SUELDO, FECHA_INGRESO, FECHA_FIN, JUSTIFICACION FROM "& _ 
                "HISTORICO_EMPLEADO WHERE (ID_EMPLEADO = @ID_EMPLEADO) AND (ID_HISTORICO_EMPLEADO"& _ 
                " = @ID_HISTORICO_EMPLEADO)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_HISTORICO_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_EMPLEADO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_EMPLEADO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CARGO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CARGO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SUELDO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SUELDO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_INGRESO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INGRESO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@JUSTIFICACION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "JUSTIFICACION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_HISTORICO_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_EMPLEADO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_EMPLEADO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_EMPLEADO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SUELDO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SUELDO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_INGRESO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INGRESO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FECHA_FIN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_HISTORICO_EMPLEADO, ID_EMPLEADO, CARGO, SUELDO, FECHA_INGRESO, FECHA_FI"& _ 
                "N, JUSTIFICACION FROM dbo.HISTORICO_EMPLEADO"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.HISTORICO_EMPLEADODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.HISTORICO_EMPLEADODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.HISTORICO_EMPLEADODataTable = New FarmaciaSJDataSet.HISTORICO_EMPLEADODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.HISTORICO_EMPLEADODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "HISTORICO_EMPLEADO")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_HISTORICO_EMPLEADO As Decimal, ByVal Original_ID_EMPLEADO As Decimal, ByVal Original_SUELDO As Double, ByVal Original_FECHA_INGRESO As Date, ByVal Original_FECHA_FIN As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_HISTORICO_EMPLEADO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID_EMPLEADO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SUELDO,Double)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FECHA_INGRESO,Date)
            If (Original_FECHA_FIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FECHA_FIN.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_HISTORICO_EMPLEADO As Decimal, ByVal ID_EMPLEADO As Decimal, ByVal CARGO As String, ByVal SUELDO As Double, ByVal FECHA_INGRESO As Date, ByVal FECHA_FIN As System.Nullable(Of Date), ByVal JUSTIFICACION As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_HISTORICO_EMPLEADO,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_EMPLEADO,Decimal)
            If (CARGO Is Nothing) Then
                Throw New System.ArgumentNullException("CARGO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CARGO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(SUELDO,Double)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_INGRESO,Date)
            If (FECHA_FIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FECHA_FIN.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (JUSTIFICACION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(JUSTIFICACION,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_HISTORICO_EMPLEADO As Decimal, ByVal ID_EMPLEADO As Decimal, ByVal CARGO As String, ByVal SUELDO As Double, ByVal FECHA_INGRESO As Date, ByVal FECHA_FIN As System.Nullable(Of Date), ByVal JUSTIFICACION As String, ByVal Original_ID_HISTORICO_EMPLEADO As Decimal, ByVal Original_ID_EMPLEADO As Decimal, ByVal Original_SUELDO As Double, ByVal Original_FECHA_INGRESO As Date, ByVal Original_FECHA_FIN As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_HISTORICO_EMPLEADO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_EMPLEADO,Decimal)
            If (CARGO Is Nothing) Then
                Throw New System.ArgumentNullException("CARGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CARGO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SUELDO,Double)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_INGRESO,Date)
            If (FECHA_FIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FECHA_FIN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (JUSTIFICACION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(JUSTIFICACION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_HISTORICO_EMPLEADO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID_EMPLEADO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SUELDO,Double)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FECHA_INGRESO,Date)
            If (Original_FECHA_FIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FECHA_FIN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class HISTORICO_IMPUESTOTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "HISTORICO_IMPUESTO"
            tableMapping.ColumnMappings.Add("ID_HISTORICO_IMPUESTO", "ID_HISTORICO_IMPUESTO")
            tableMapping.ColumnMappings.Add("ID_IMPUESTO", "ID_IMPUESTO")
            tableMapping.ColumnMappings.Add("FECHA_INICIO", "FECHA_INICIO")
            tableMapping.ColumnMappings.Add("FECHA_FIN", "FECHA_FIN")
            tableMapping.ColumnMappings.Add("VALOR", "VALOR")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[HISTORICO_IMPUESTO] WHERE (([ID_HISTORICO_IMPUESTO] = @Origina"& _ 
                "l_ID_HISTORICO_IMPUESTO) AND ([ID_IMPUESTO] = @Original_ID_IMPUESTO) AND ([FECHA"& _ 
                "_INICIO] = @Original_FECHA_INICIO) AND ((@IsNull_FECHA_FIN = 1 AND [FECHA_FIN] I"& _ 
                "S NULL) OR ([FECHA_FIN] = @Original_FECHA_FIN)) AND ([VALOR] = @Original_VALOR))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_HISTORICO_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FECHA_FIN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_VALOR", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "VALOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HISTORICO_IMPUESTO] ([ID_IMPUESTO], [FECHA_INICIO], [FECHA_FIN"& _ 
                "], [VALOR], [DESCRIPCION]) VALUES (@ID_IMPUESTO, @FECHA_INICIO, @FECHA_FIN, @VAL"& _ 
                "OR, @DESCRIPCION);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_HISTORICO_IMPUESTO, ID_IMPUESTO, FECHA_INICIO, FEC"& _ 
                "HA_FIN, VALOR, DESCRIPCION FROM HISTORICO_IMPUESTO WHERE (ID_HISTORICO_IMPUESTO "& _ 
                "= SCOPE_IDENTITY()) AND (ID_IMPUESTO = @ID_IMPUESTO)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_INICIO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@VALOR", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "VALOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCRIPCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[HISTORICO_IMPUESTO] SET [ID_IMPUESTO] = @ID_IMPUESTO, [FECHA_INICIO"& _ 
                "] = @FECHA_INICIO, [FECHA_FIN] = @FECHA_FIN, [VALOR] = @VALOR, [DESCRIPCION] = @"& _ 
                "DESCRIPCION WHERE (([ID_HISTORICO_IMPUESTO] = @Original_ID_HISTORICO_IMPUESTO) A"& _ 
                "ND ([ID_IMPUESTO] = @Original_ID_IMPUESTO) AND ([FECHA_INICIO] = @Original_FECHA"& _ 
                "_INICIO) AND ((@IsNull_FECHA_FIN = 1 AND [FECHA_FIN] IS NULL) OR ([FECHA_FIN] = "& _ 
                "@Original_FECHA_FIN)) AND ([VALOR] = @Original_VALOR));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_HISTORICO_IMP"& _ 
                "UESTO, ID_IMPUESTO, FECHA_INICIO, FECHA_FIN, VALOR, DESCRIPCION FROM HISTORICO_I"& _ 
                "MPUESTO WHERE (ID_HISTORICO_IMPUESTO = @ID_HISTORICO_IMPUESTO) AND (ID_IMPUESTO "& _ 
                "= @ID_IMPUESTO)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_INICIO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@VALOR", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "VALOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCRIPCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_HISTORICO_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FECHA_FIN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_VALOR", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "VALOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_HISTORICO_IMPUESTO", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_HISTORICO_IMPUESTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_HISTORICO_IMPUESTO, ID_IMPUESTO, FECHA_INICIO, FECHA_FIN, VALOR, DESCRI"& _ 
                "PCION FROM dbo.HISTORICO_IMPUESTO"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.HISTORICO_IMPUESTODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.HISTORICO_IMPUESTODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.HISTORICO_IMPUESTODataTable = New FarmaciaSJDataSet.HISTORICO_IMPUESTODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.HISTORICO_IMPUESTODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "HISTORICO_IMPUESTO")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_HISTORICO_IMPUESTO As Decimal, ByVal Original_ID_IMPUESTO As Decimal, ByVal Original_FECHA_INICIO As Date, ByVal Original_FECHA_FIN As System.Nullable(Of Date), ByVal Original_VALOR As Double) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_HISTORICO_IMPUESTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID_IMPUESTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FECHA_INICIO,Date)
            If (Original_FECHA_FIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FECHA_FIN.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_VALOR,Double)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_IMPUESTO As Decimal, ByVal FECHA_INICIO As Date, ByVal FECHA_FIN As System.Nullable(Of Date), ByVal VALOR As Double, ByVal DESCRIPCION As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_IMPUESTO,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FECHA_INICIO,Date)
            If (FECHA_FIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FECHA_FIN.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(VALOR,Double)
            If (DESCRIPCION Is Nothing) Then
                Throw New System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DESCRIPCION,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_IMPUESTO As Decimal, ByVal FECHA_INICIO As Date, ByVal FECHA_FIN As System.Nullable(Of Date), ByVal VALOR As Double, ByVal DESCRIPCION As String, ByVal Original_ID_HISTORICO_IMPUESTO As Decimal, ByVal Original_ID_IMPUESTO As Decimal, ByVal Original_FECHA_INICIO As Date, ByVal Original_FECHA_FIN As System.Nullable(Of Date), ByVal Original_VALOR As Double, ByVal ID_HISTORICO_IMPUESTO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_IMPUESTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FECHA_INICIO,Date)
            If (FECHA_FIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FECHA_FIN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(VALOR,Double)
            If (DESCRIPCION Is Nothing) Then
                Throw New System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_HISTORICO_IMPUESTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID_IMPUESTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FECHA_INICIO,Date)
            If (Original_FECHA_FIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FECHA_FIN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_VALOR,Double)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ID_HISTORICO_IMPUESTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IMPUESTOTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IMPUESTO"
            tableMapping.ColumnMappings.Add("ID_IMPUESTO", "ID_IMPUESTO")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[IMPUESTO] WHERE (([ID_IMPUESTO] = @Original_ID_IMPUESTO) AND ("& _ 
                "[Nombre] = @Original_Nombre))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Nombre", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[IMPUESTO] ([Nombre], [Descripcion]) VALUES (@Nombre, @Descripc"& _ 
                "ion);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_IMPUESTO, Nombre, Descripcion FROM IMPUESTO WHERE (ID_IMPUESTO "& _ 
                "= SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Nombre", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[IMPUESTO] SET [Nombre] = @Nombre, [Descripcion] = @Descripcion WHER"& _ 
                "E (([ID_IMPUESTO] = @Original_ID_IMPUESTO) AND ([Nombre] = @Original_Nombre));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT ID_IMPUESTO, Nombre, Descripcion FROM IMPUESTO WHERE (ID_IMPUESTO = @ID_I"& _ 
                "MPUESTO)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Nombre", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Nombre", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_IMPUESTO", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_IMPUESTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_IMPUESTO, Nombre, Descripcion FROM dbo.IMPUESTO"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.IMPUESTODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.IMPUESTODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.IMPUESTODataTable = New FarmaciaSJDataSet.IMPUESTODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.IMPUESTODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "IMPUESTO")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_IMPUESTO As Decimal, ByVal Original_Nombre As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_IMPUESTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Nombre,Date)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Nombre As Date, ByVal Descripcion As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Nombre,Date)
            If (Descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Descripcion")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Nombre As Date, ByVal Descripcion As String, ByVal Original_ID_IMPUESTO As Decimal, ByVal Original_Nombre As Date, ByVal ID_IMPUESTO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Nombre,Date)
            If (Descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Descripcion")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Descripcion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID_IMPUESTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_Nombre,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_IMPUESTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOTETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOTE"
            tableMapping.ColumnMappings.Add("ID_LOTE", "ID_LOTE")
            tableMapping.ColumnMappings.Add("CANTIDAD", "CANTIDAD")
            tableMapping.ColumnMappings.Add("FECHA_VENCIMIENTO", "FECHA_VENCIMIENTO")
            tableMapping.ColumnMappings.Add("PVP", "PVP")
            tableMapping.ColumnMappings.Add("DESCUENTO", "DESCUENTO")
            tableMapping.ColumnMappings.Add("ID_PRODUCTO", "ID_PRODUCTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LOTE] WHERE (([ID_LOTE] = @Original_ID_LOTE) AND ([CANTIDAD] ="& _ 
                " @Original_CANTIDAD) AND ([FECHA_VENCIMIENTO] = @Original_FECHA_VENCIMIENTO) AND"& _ 
                " ([PVP] = @Original_PVP) AND ([DESCUENTO] = @Original_DESCUENTO) AND ([ID_PRODUC"& _ 
                "TO] = @Original_ID_PRODUCTO))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_LOTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LOTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CANTIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_VENCIMIENTO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_VENCIMIENTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PVP", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "PVP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DESCUENTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LOTE] ([CANTIDAD], [FECHA_VENCIMIENTO], [PVP], [DESCUENTO], [I"& _ 
                "D_PRODUCTO]) VALUES (@CANTIDAD, @FECHA_VENCIMIENTO, @PVP, @DESCUENTO, @ID_PRODUC"& _ 
                "TO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_LOTE, CANTIDAD, FECHA_VENCIMIENTO, PVP, DESCUENTO, ID_PRODUCTO F"& _ 
                "ROM LOTE WHERE (ID_LOTE = SCOPE_IDENTITY()) AND (ID_PRODUCTO = @ID_PRODUCTO)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CANTIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_VENCIMIENTO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_VENCIMIENTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PVP", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "PVP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCUENTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LOTE] SET [CANTIDAD] = @CANTIDAD, [FECHA_VENCIMIENTO] = @FECHA_VENC"& _ 
                "IMIENTO, [PVP] = @PVP, [DESCUENTO] = @DESCUENTO, [ID_PRODUCTO] = @ID_PRODUCTO WH"& _ 
                "ERE (([ID_LOTE] = @Original_ID_LOTE) AND ([CANTIDAD] = @Original_CANTIDAD) AND ("& _ 
                "[FECHA_VENCIMIENTO] = @Original_FECHA_VENCIMIENTO) AND ([PVP] = @Original_PVP) A"& _ 
                "ND ([DESCUENTO] = @Original_DESCUENTO) AND ([ID_PRODUCTO] = @Original_ID_PRODUCT"& _ 
                "O));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_LOTE, CANTIDAD, FECHA_VENCIMIENTO, PVP, DESCUENTO, ID_PRODUCTO F"& _ 
                "ROM LOTE WHERE (ID_LOTE = @ID_LOTE) AND (ID_PRODUCTO = @ID_PRODUCTO)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CANTIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_VENCIMIENTO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_VENCIMIENTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PVP", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "PVP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCUENTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_LOTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LOTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CANTIDAD", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_VENCIMIENTO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_VENCIMIENTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PVP", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "PVP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DESCUENTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_LOTE", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_LOTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_LOTE, CANTIDAD, FECHA_VENCIMIENTO, PVP, DESCUENTO, ID_PRODUCTO FROM dbo"& _ 
                ".LOTE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.LOTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.LOTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.LOTEDataTable = New FarmaciaSJDataSet.LOTEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.LOTEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "LOTE")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_LOTE As Decimal, ByVal Original_CANTIDAD As Decimal, ByVal Original_FECHA_VENCIMIENTO As Date, ByVal Original_PVP As Double, ByVal Original_DESCUENTO As Double, ByVal Original_ID_PRODUCTO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_LOTE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CANTIDAD,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FECHA_VENCIMIENTO,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PVP,Double)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DESCUENTO,Double)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_PRODUCTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CANTIDAD As Decimal, ByVal FECHA_VENCIMIENTO As Date, ByVal PVP As Double, ByVal DESCUENTO As Double, ByVal ID_PRODUCTO As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CANTIDAD,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FECHA_VENCIMIENTO,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PVP,Double)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DESCUENTO,Double)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_PRODUCTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CANTIDAD As Decimal, ByVal FECHA_VENCIMIENTO As Date, ByVal PVP As Double, ByVal DESCUENTO As Double, ByVal ID_PRODUCTO As Decimal, ByVal Original_ID_LOTE As Decimal, ByVal Original_CANTIDAD As Decimal, ByVal Original_FECHA_VENCIMIENTO As Date, ByVal Original_PVP As Double, ByVal Original_DESCUENTO As Double, ByVal Original_ID_PRODUCTO As Decimal, ByVal ID_LOTE As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CANTIDAD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FECHA_VENCIMIENTO,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PVP,Double)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DESCUENTO,Double)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_PRODUCTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID_LOTE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CANTIDAD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FECHA_VENCIMIENTO,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PVP,Double)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_DESCUENTO,Double)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID_PRODUCTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ID_LOTE,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class OTROS_GASTOSTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OTROS_GASTOS"
            tableMapping.ColumnMappings.Add("ID_OTROS_GASTOS", "ID_OTROS_GASTOS")
            tableMapping.ColumnMappings.Add("MONTO", "MONTO")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OTROS_GASTOS] ([ID_OTROS_GASTOS], [MONTO], [FECHA], [DESCRIPCI"& _ 
                "ON]) VALUES (@ID_OTROS_GASTOS, @MONTO, @FECHA, @DESCRIPCION)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_OTROS_GASTOS", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_OTROS_GASTOS", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MONTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "MONTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCRIPCION", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_OTROS_GASTOS, MONTO, FECHA, DESCRIPCION FROM dbo.OTROS_GASTOS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.OTROS_GASTOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.OTROS_GASTOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.OTROS_GASTOSDataTable = New FarmaciaSJDataSet.OTROS_GASTOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.OTROS_GASTOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "OTROS_GASTOS")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_OTROS_GASTOS As Decimal, ByVal MONTO As Double, ByVal FECHA As Date, ByVal DESCRIPCION As Double) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_OTROS_GASTOS,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MONTO,Double)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FECHA,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DESCRIPCION,Double)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRODUCTOTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRODUCTO"
            tableMapping.ColumnMappings.Add("ID_PRODUCTO", "ID_PRODUCTO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("CODIGO_DE_BARRAS", "CODIGO_DE_BARRAS")
            tableMapping.ColumnMappings.Add("CODIGO", "CODIGO")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("GRAVADO_EXENTO", "GRAVADO_EXENTO")
            tableMapping.ColumnMappings.Add("ID_LINEA", "ID_LINEA")
            tableMapping.ColumnMappings.Add("UNIDADES_POR_PAQUETE", "UNIDADES_POR_PAQUETE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [PRODUCTO] WHERE (([ID_PRODUCTO] = @Original_ID_PRODUCTO) AND ([ID_LI"& _ 
                "NEA] = @Original_ID_LINEA) AND ([UNIDADES_POR_PAQUETE] = @Original_UNIDADES_POR_"& _ 
                "PAQUETE))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_LINEA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LINEA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_UNIDADES_POR_PAQUETE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "UNIDADES_POR_PAQUETE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [PRODUCTO] ([NOMBRE], [CODIGO_DE_BARRAS], [CODIGO], [DESCRIPCION], [G"& _ 
                "RAVADO_EXENTO], [ID_LINEA], [UNIDADES_POR_PAQUETE]) VALUES (@NOMBRE, @CODIGO_DE_"& _ 
                "BARRAS, @CODIGO, @DESCRIPCION, @GRAVADO_EXENTO, @ID_LINEA, @UNIDADES_POR_PAQUETE"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PRODUCTO, NOMBRE, CODIGO_DE_BARRAS, CODIGO, DESCRIPCION, GRAVADO_E"& _ 
                "XENTO, ID_LINEA, UNIDADES_POR_PAQUETE FROM PRODUCTO WHERE (ID_PRODUCTO = SCOPE_I"& _ 
                "DENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NOMBRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CODIGO_DE_BARRAS", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODIGO_DE_BARRAS", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CODIGO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODIGO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCRIPCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@GRAVADO_EXENTO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GRAVADO_EXENTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_LINEA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LINEA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@UNIDADES_POR_PAQUETE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "UNIDADES_POR_PAQUETE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [PRODUCTO] SET [NOMBRE] = @NOMBRE, [CODIGO_DE_BARRAS] = @CODIGO_DE_BARRAS,"& _ 
                " [CODIGO] = @CODIGO, [DESCRIPCION] = @DESCRIPCION, [GRAVADO_EXENTO] = @GRAVADO_E"& _ 
                "XENTO, [ID_LINEA] = @ID_LINEA, [UNIDADES_POR_PAQUETE] = @UNIDADES_POR_PAQUETE WH"& _ 
                "ERE (([ID_PRODUCTO] = @Original_ID_PRODUCTO) AND ([ID_LINEA] = @Original_ID_LINE"& _ 
                "A) AND ([UNIDADES_POR_PAQUETE] = @Original_UNIDADES_POR_PAQUETE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PR"& _ 
                "ODUCTO, NOMBRE, CODIGO_DE_BARRAS, CODIGO, DESCRIPCION, GRAVADO_EXENTO, ID_LINEA,"& _ 
                " UNIDADES_POR_PAQUETE FROM PRODUCTO WHERE (ID_PRODUCTO = @ID_PRODUCTO)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NOMBRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CODIGO_DE_BARRAS", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODIGO_DE_BARRAS", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CODIGO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODIGO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCRIPCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@GRAVADO_EXENTO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GRAVADO_EXENTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_LINEA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LINEA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@UNIDADES_POR_PAQUETE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "UNIDADES_POR_PAQUETE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_LINEA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LINEA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_UNIDADES_POR_PAQUETE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "UNIDADES_POR_PAQUETE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_PRODUCTO, NOMBRE, CODIGO_DE_BARRAS, CODIGO, DESCRIPCION, GRAVADO_EXENTO"& _ 
                ", ID_LINEA, UNIDADES_POR_PAQUETE FROM PRODUCTO"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.PRODUCTODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.PRODUCTODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.PRODUCTODataTable = New FarmaciaSJDataSet.PRODUCTODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.PRODUCTODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PRODUCTO")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_PRODUCTO As Decimal, ByVal Original_ID_LINEA As Decimal, ByVal Original_UNIDADES_POR_PAQUETE As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_PRODUCTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID_LINEA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_UNIDADES_POR_PAQUETE,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NOMBRE As String, ByVal CODIGO_DE_BARRAS As String, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal GRAVADO_EXENTO As String, ByVal ID_LINEA As Decimal, ByVal UNIDADES_POR_PAQUETE As Decimal) As Integer
            If (NOMBRE Is Nothing) Then
                Throw New System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NOMBRE,String)
            End If
            If (CODIGO_DE_BARRAS Is Nothing) Then
                Throw New System.ArgumentNullException("CODIGO_DE_BARRAS")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_DE_BARRAS,String)
            End If
            If (CODIGO Is Nothing) Then
                Throw New System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CODIGO,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DESCRIPCION,String)
            End If
            If (GRAVADO_EXENTO Is Nothing) Then
                Throw New System.ArgumentNullException("GRAVADO_EXENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(GRAVADO_EXENTO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_LINEA,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(UNIDADES_POR_PAQUETE,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal CODIGO_DE_BARRAS As String, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal GRAVADO_EXENTO As String, ByVal ID_LINEA As Decimal, ByVal UNIDADES_POR_PAQUETE As Decimal, ByVal Original_ID_PRODUCTO As Decimal, ByVal Original_ID_LINEA As Decimal, ByVal Original_UNIDADES_POR_PAQUETE As Decimal, ByVal ID_PRODUCTO As Decimal) As Integer
            If (NOMBRE Is Nothing) Then
                Throw New System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NOMBRE,String)
            End If
            If (CODIGO_DE_BARRAS Is Nothing) Then
                Throw New System.ArgumentNullException("CODIGO_DE_BARRAS")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_DE_BARRAS,String)
            End If
            If (CODIGO Is Nothing) Then
                Throw New System.ArgumentNullException("CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CODIGO,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DESCRIPCION,String)
            End If
            If (GRAVADO_EXENTO Is Nothing) Then
                Throw New System.ArgumentNullException("GRAVADO_EXENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(GRAVADO_EXENTO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_LINEA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(UNIDADES_POR_PAQUETE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID_PRODUCTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID_LINEA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_UNIDADES_POR_PAQUETE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ID_PRODUCTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PROVEEDORTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PROVEEDOR"
            tableMapping.ColumnMappings.Add("ID_PROVEEDOR", "ID_PROVEEDOR")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("RIF", "RIF")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Mail", "Mail")
            tableMapping.ColumnMappings.Add("Ciudad", "Ciudad")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("Saldo", "Saldo")
            tableMapping.ColumnMappings.Add("Estatus", "Estatus")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [PROVEEDOR] WHERE (([ID_PROVEEDOR] = @Original_ID_PROVEEDOR) AND ([Sa"& _ 
                "ldo] = @Original_Saldo))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Saldo", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "Saldo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [PROVEEDOR] ([Codigo], [RIF], [Nombre], [Mail], [Ciudad], [Direccion]"& _ 
                ", [Saldo], [Estatus]) VALUES (@Codigo, @RIF, @Nombre, @Mail, @Ciudad, @Direccion"& _ 
                ", @Saldo, @Estatus);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PROVEEDOR, Codigo, RIF, Nombre, Mail, Ciudad, Di"& _ 
                "reccion, Saldo, Estatus FROM PROVEEDOR WHERE (ID_PROVEEDOR = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Codigo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Codigo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RIF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIF", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Mail", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Mail", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Ciudad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ciudad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Direccion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Direccion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Saldo", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "Saldo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Estatus", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Estatus", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [PROVEEDOR] SET [Codigo] = @Codigo, [RIF] = @RIF, [Nombre] = @Nombre, [Mai"& _ 
                "l] = @Mail, [Ciudad] = @Ciudad, [Direccion] = @Direccion, [Saldo] = @Saldo, [Est"& _ 
                "atus] = @Estatus WHERE (([ID_PROVEEDOR] = @Original_ID_PROVEEDOR) AND ([Saldo] ="& _ 
                " @Original_Saldo));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PROVEEDOR, Codigo, RIF, Nombre, Mail, Ciudad, Dir"& _ 
                "eccion, Saldo, Estatus FROM PROVEEDOR WHERE (ID_PROVEEDOR = @ID_PROVEEDOR)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Codigo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Codigo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@RIF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIF", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Mail", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Mail", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Ciudad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ciudad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Direccion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Direccion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Saldo", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "Saldo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Estatus", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Estatus", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Saldo", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "Saldo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_PROVEEDOR, Codigo, RIF, Nombre, Mail, Ciudad, Direccion, Saldo, Estatus"& _ 
                " FROM PROVEEDOR"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.PROVEEDORDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.PROVEEDORDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.PROVEEDORDataTable = New FarmaciaSJDataSet.PROVEEDORDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.PROVEEDORDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PROVEEDOR")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_PROVEEDOR As Decimal, ByVal Original_Saldo As Double) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_PROVEEDOR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Saldo,Double)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Codigo As String, ByVal RIF As String, ByVal Nombre As String, ByVal Mail As String, ByVal Ciudad As String, ByVal Direccion As String, ByVal Saldo As Double, ByVal Estatus As String) As Integer
            If (Codigo Is Nothing) Then
                Throw New System.ArgumentNullException("Codigo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo,String)
            End If
            If (RIF Is Nothing) Then
                Throw New System.ArgumentNullException("RIF")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RIF,String)
            End If
            If (Nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Nombre,String)
            End If
            If (Mail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Mail,String)
            End If
            If (Ciudad Is Nothing) Then
                Throw New System.ArgumentNullException("Ciudad")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Ciudad,String)
            End If
            If (Direccion Is Nothing) Then
                Throw New System.ArgumentNullException("Direccion")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Direccion,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Saldo,Double)
            If (Estatus Is Nothing) Then
                Throw New System.ArgumentNullException("Estatus")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Estatus,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Codigo As String, ByVal RIF As String, ByVal Nombre As String, ByVal Mail As String, ByVal Ciudad As String, ByVal Direccion As String, ByVal Saldo As Double, ByVal Estatus As String, ByVal Original_ID_PROVEEDOR As Decimal, ByVal Original_Saldo As Double, ByVal ID_PROVEEDOR As Decimal) As Integer
            If (Codigo Is Nothing) Then
                Throw New System.ArgumentNullException("Codigo")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Codigo,String)
            End If
            If (RIF Is Nothing) Then
                Throw New System.ArgumentNullException("RIF")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RIF,String)
            End If
            If (Nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Nombre,String)
            End If
            If (Mail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Mail,String)
            End If
            If (Ciudad Is Nothing) Then
                Throw New System.ArgumentNullException("Ciudad")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Ciudad,String)
            End If
            If (Direccion Is Nothing) Then
                Throw New System.ArgumentNullException("Direccion")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Direccion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Saldo,Double)
            If (Estatus Is Nothing) Then
                Throw New System.ArgumentNullException("Estatus")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Estatus,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID_PROVEEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Saldo,Double)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ID_PROVEEDOR,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PROVEEDOR_PRODUCTOTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PROVEEDOR_PRODUCTO"
            tableMapping.ColumnMappings.Add("ID_PROVEEDOR", "ID_PROVEEDOR")
            tableMapping.ColumnMappings.Add("ID_PRODUCTO", "ID_PRODUCTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PROVEEDOR_PRODUCTO] WHERE (([ID_PROVEEDOR] = @Original_ID_PROV"& _ 
                "EEDOR) AND ([ID_PRODUCTO] = @Original_ID_PRODUCTO))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PROVEEDOR_PRODUCTO] ([ID_PROVEEDOR], [ID_PRODUCTO]) VALUES (@I"& _ 
                "D_PROVEEDOR, @ID_PRODUCTO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PROVEEDOR, ID_PRODUCTO FROM PROVEEDOR_PRO"& _ 
                "DUCTO WHERE (ID_PRODUCTO = @ID_PRODUCTO) AND (ID_PROVEEDOR = @ID_PROVEEDOR)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PROVEEDOR_PRODUCTO] SET [ID_PROVEEDOR] = @ID_PROVEEDOR, [ID_PRODUCT"& _ 
                "O] = @ID_PRODUCTO WHERE (([ID_PROVEEDOR] = @Original_ID_PROVEEDOR) AND ([ID_PROD"& _ 
                "UCTO] = @Original_ID_PRODUCTO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PROVEEDOR, ID_PRODUCTO FROM PROVEEDO"& _ 
                "R_PRODUCTO WHERE (ID_PRODUCTO = @ID_PRODUCTO) AND (ID_PROVEEDOR = @ID_PROVEEDOR)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_PROVEEDOR, ID_PRODUCTO FROM dbo.PROVEEDOR_PRODUCTO"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.PROVEEDOR_PRODUCTODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.PROVEEDOR_PRODUCTODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.PROVEEDOR_PRODUCTODataTable = New FarmaciaSJDataSet.PROVEEDOR_PRODUCTODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.PROVEEDOR_PRODUCTODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PROVEEDOR_PRODUCTO")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_PROVEEDOR As Decimal, ByVal Original_ID_PRODUCTO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_PROVEEDOR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID_PRODUCTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_PROVEEDOR As Decimal, ByVal ID_PRODUCTO As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_PROVEEDOR,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_PRODUCTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_PROVEEDOR As Decimal, ByVal ID_PRODUCTO As Decimal, ByVal Original_ID_PROVEEDOR As Decimal, ByVal Original_ID_PRODUCTO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_PROVEEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_PRODUCTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID_PROVEEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ID_PRODUCTO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TELEFONO_PROVEEDORTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TELEFONO_PROVEEDOR"
            tableMapping.ColumnMappings.Add("ID_TELEFONO_PROVEEDOR", "ID_TELEFONO_PROVEEDOR")
            tableMapping.ColumnMappings.Add("ID_PROVEEDOR", "ID_PROVEEDOR")
            tableMapping.ColumnMappings.Add("CODIGO_DE_AREA", "CODIGO_DE_AREA")
            tableMapping.ColumnMappings.Add("NUMERO", "NUMERO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TELEFONO_PROVEEDOR] WHERE (([ID_TELEFONO_PROVEEDOR] = @Origina"& _ 
                "l_ID_TELEFONO_PROVEEDOR) AND ([ID_PROVEEDOR] = @Original_ID_PROVEEDOR))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_TELEFONO_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_TELEFONO_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TELEFONO_PROVEEDOR] ([ID_PROVEEDOR], [CODIGO_DE_AREA], [NUMERO"& _ 
                "]) VALUES (@ID_PROVEEDOR, @CODIGO_DE_AREA, @NUMERO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_TELEFONO_PROVEED"& _ 
                "OR, ID_PROVEEDOR, CODIGO_DE_AREA, NUMERO FROM TELEFONO_PROVEEDOR WHERE (ID_PROVE"& _ 
                "EDOR = @ID_PROVEEDOR) AND (ID_TELEFONO_PROVEEDOR = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CODIGO_DE_AREA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODIGO_DE_AREA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TELEFONO_PROVEEDOR] SET [ID_PROVEEDOR] = @ID_PROVEEDOR, [CODIGO_DE_"& _ 
                "AREA] = @CODIGO_DE_AREA, [NUMERO] = @NUMERO WHERE (([ID_TELEFONO_PROVEEDOR] = @O"& _ 
                "riginal_ID_TELEFONO_PROVEEDOR) AND ([ID_PROVEEDOR] = @Original_ID_PROVEEDOR));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT ID_TELEFONO_PROVEEDOR, ID_PROVEEDOR, CODIGO_DE_AREA, NUMERO FROM TELEFONO"& _ 
                "_PROVEEDOR WHERE (ID_PROVEEDOR = @ID_PROVEEDOR) AND (ID_TELEFONO_PROVEEDOR = @ID"& _ 
                "_TELEFONO_PROVEEDOR)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CODIGO_DE_AREA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODIGO_DE_AREA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_TELEFONO_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_TELEFONO_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PROVEEDOR", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PROVEEDOR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_TELEFONO_PROVEEDOR", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_TELEFONO_PROVEEDOR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_TELEFONO_PROVEEDOR, ID_PROVEEDOR, CODIGO_DE_AREA, NUMERO FROM dbo.TELEF"& _ 
                "ONO_PROVEEDOR"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.TELEFONO_PROVEEDORDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.TELEFONO_PROVEEDORDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.TELEFONO_PROVEEDORDataTable = New FarmaciaSJDataSet.TELEFONO_PROVEEDORDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.TELEFONO_PROVEEDORDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TELEFONO_PROVEEDOR")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_TELEFONO_PROVEEDOR As Decimal, ByVal Original_ID_PROVEEDOR As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_TELEFONO_PROVEEDOR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID_PROVEEDOR,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_PROVEEDOR As Decimal, ByVal CODIGO_DE_AREA As String, ByVal NUMERO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_PROVEEDOR,Decimal)
            If (CODIGO_DE_AREA Is Nothing) Then
                Throw New System.ArgumentNullException("CODIGO_DE_AREA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_DE_AREA,String)
            End If
            If (NUMERO Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NUMERO,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_PROVEEDOR As Decimal, ByVal CODIGO_DE_AREA As String, ByVal NUMERO As String, ByVal Original_ID_TELEFONO_PROVEEDOR As Decimal, ByVal Original_ID_PROVEEDOR As Decimal, ByVal ID_TELEFONO_PROVEEDOR As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_PROVEEDOR,Decimal)
            If (CODIGO_DE_AREA Is Nothing) Then
                Throw New System.ArgumentNullException("CODIGO_DE_AREA")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_DE_AREA,String)
            End If
            If (NUMERO Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NUMERO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ID_TELEFONO_PROVEEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID_PROVEEDOR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_TELEFONO_PROVEEDOR,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VENTATableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VENTA"
            tableMapping.ColumnMappings.Add("ID_VENTA", "ID_VENTA")
            tableMapping.ColumnMappings.Add("NUMERO_FACTURA", "NUMERO_FACTURA")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("VENCE", "VENCE")
            tableMapping.ColumnMappings.Add("DESCUENTO", "DESCUENTO")
            tableMapping.ColumnMappings.Add("TIPO_PAGO", "TIPO_PAGO")
            tableMapping.ColumnMappings.Add("NUMERO_T_CHEQ", "NUMERO_T_CHEQ")
            tableMapping.ColumnMappings.Add("ID_CLIENTE", "ID_CLIENTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VENTA] WHERE (([ID_VENTA] = @Original_ID_VENTA) AND ([FECHA] ="& _ 
                " @Original_FECHA) AND ([VENCE] = @Original_VENCE) AND ([DESCUENTO] = @Original_D"& _ 
                "ESCUENTO) AND ([ID_CLIENTE] = @Original_ID_CLIENTE))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_VENTA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_VENCE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VENCE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DESCUENTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VENTA] ([ID_VENTA], [NUMERO_FACTURA], [FECHA], [VENCE], [DESCU"& _ 
                "ENTO], [TIPO_PAGO], [NUMERO_T_CHEQ], [ID_CLIENTE]) VALUES (@ID_VENTA, @NUMERO_FA"& _ 
                "CTURA, @FECHA, @VENCE, @DESCUENTO, @TIPO_PAGO, @NUMERO_T_CHEQ, @ID_CLIENTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT ID_VENTA, NUMERO_FACTURA, FECHA, VENCE, DESCUENTO, TIPO_PAGO, NUMERO_T_CHEQ"& _ 
                ", ID_CLIENTE FROM VENTA WHERE (ID_VENTA = @ID_VENTA)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_VENTA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO_FACTURA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO_FACTURA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@VENCE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VENCE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCUENTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TIPO_PAGO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TIPO_PAGO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO_T_CHEQ", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO_T_CHEQ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VENTA] SET [ID_VENTA] = @ID_VENTA, [NUMERO_FACTURA] = @NUMERO_FACTU"& _ 
                "RA, [FECHA] = @FECHA, [VENCE] = @VENCE, [DESCUENTO] = @DESCUENTO, [TIPO_PAGO] = "& _ 
                "@TIPO_PAGO, [NUMERO_T_CHEQ] = @NUMERO_T_CHEQ, [ID_CLIENTE] = @ID_CLIENTE WHERE ("& _ 
                "([ID_VENTA] = @Original_ID_VENTA) AND ([FECHA] = @Original_FECHA) AND ([VENCE] ="& _ 
                " @Original_VENCE) AND ([DESCUENTO] = @Original_DESCUENTO) AND ([ID_CLIENTE] = @O"& _ 
                "riginal_ID_CLIENTE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_VENTA, NUMERO_FACTURA, FECHA, VENCE, DESCUENTO,"& _ 
                " TIPO_PAGO, NUMERO_T_CHEQ, ID_CLIENTE FROM VENTA WHERE (ID_VENTA = @ID_VENTA)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_VENTA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO_FACTURA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO_FACTURA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@VENCE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VENCE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCUENTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TIPO_PAGO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TIPO_PAGO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO_T_CHEQ", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO_T_CHEQ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_VENTA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_VENTA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_VENCE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VENCE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DESCUENTO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_VENTA, NUMERO_FACTURA, FECHA, VENCE, DESCUENTO, TIPO_PAGO, NUMERO_T_CHE"& _ 
                "Q, ID_CLIENTE FROM dbo.VENTA"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.VENTADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.VENTADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.VENTADataTable = New FarmaciaSJDataSet.VENTADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.VENTADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "VENTA")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_VENTA As Decimal, ByVal Original_FECHA As Date, ByVal Original_VENCE As Date, ByVal Original_DESCUENTO As Double, ByVal Original_ID_CLIENTE As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_VENTA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_VENCE,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DESCUENTO,Double)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ID_CLIENTE,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID_VENTA As Decimal, ByVal NUMERO_FACTURA As String, ByVal FECHA As Date, ByVal VENCE As Date, ByVal DESCUENTO As Double, ByVal TIPO_PAGO As String, ByVal NUMERO_T_CHEQ As String, ByVal ID_CLIENTE As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID_VENTA,Decimal)
            If (NUMERO_FACTURA Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO_FACTURA")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NUMERO_FACTURA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FECHA,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(VENCE,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(DESCUENTO,Double)
            If (TIPO_PAGO Is Nothing) Then
                Throw New System.ArgumentNullException("TIPO_PAGO")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TIPO_PAGO,String)
            End If
            If (NUMERO_T_CHEQ Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO_T_CHEQ")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NUMERO_T_CHEQ,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ID_CLIENTE,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID_VENTA As Decimal, ByVal NUMERO_FACTURA As String, ByVal FECHA As Date, ByVal VENCE As Date, ByVal DESCUENTO As Double, ByVal TIPO_PAGO As String, ByVal NUMERO_T_CHEQ As String, ByVal ID_CLIENTE As Decimal, ByVal Original_ID_VENTA As Decimal, ByVal Original_FECHA As Date, ByVal Original_VENCE As Date, ByVal Original_DESCUENTO As Double, ByVal Original_ID_CLIENTE As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID_VENTA,Decimal)
            If (NUMERO_FACTURA Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO_FACTURA")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NUMERO_FACTURA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(VENCE,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DESCUENTO,Double)
            If (TIPO_PAGO Is Nothing) Then
                Throw New System.ArgumentNullException("TIPO_PAGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TIPO_PAGO,String)
            End If
            If (NUMERO_T_CHEQ Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO_T_CHEQ")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NUMERO_T_CHEQ,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ID_CLIENTE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID_VENTA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FECHA,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_VENCE,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DESCUENTO,Double)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ID_CLIENTE,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PEDIDO_FRECUENTETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PEDIDO_FRECUENTE"
            tableMapping.ColumnMappings.Add("ID_PEDIDO", "ID_PEDIDO")
            tableMapping.ColumnMappings.Add("NUMERO_PEDIDO", "NUMERO_PEDIDO")
            tableMapping.ColumnMappings.Add("FECHA_INICIO", "FECHA_INICIO")
            tableMapping.ColumnMappings.Add("FECHA_FIN", "FECHA_FIN")
            tableMapping.ColumnMappings.Add("FECHA_ULTIMA_COMPRA", "FECHA_ULTIMA_COMPRA")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("CANTIDAD_DIARIA", "CANTIDAD_DIARIA")
            tableMapping.ColumnMappings.Add("ID_PRODUCTO", "ID_PRODUCTO")
            tableMapping.ColumnMappings.Add("ID_CLIENTE", "ID_CLIENTE")
            tableMapping.ColumnMappings.Add("ESTATUS", "ESTATUS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PEDIDO_FRECUENTE] WHERE (([ID_PEDIDO] = @Original_ID_PEDIDO) A"& _ 
                "ND ([FECHA_INICIO] = @Original_FECHA_INICIO) AND ([FECHA_FIN] = @Original_FECHA_"& _ 
                "FIN) AND ([FECHA_ULTIMA_COMPRA] = @Original_FECHA_ULTIMA_COMPRA) AND ([CANTIDAD_"& _ 
                "DIARIA] = @Original_CANTIDAD_DIARIA) AND ([ID_PRODUCTO] = @Original_ID_PRODUCTO)"& _ 
                " AND ([ID_CLIENTE] = @Original_ID_CLIENTE))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PEDIDO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PEDIDO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_ULTIMA_COMPRA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_ULTIMA_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CANTIDAD_DIARIA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD_DIARIA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PEDIDO_FRECUENTE] ([NUMERO_PEDIDO], [FECHA_INICIO], [FECHA_FIN"& _ 
                "], [FECHA_ULTIMA_COMPRA], [DESCRIPCION], [CANTIDAD_DIARIA], [ID_PRODUCTO], [ID_C"& _ 
                "LIENTE], [ESTATUS]) VALUES (@NUMERO_PEDIDO, @FECHA_INICIO, @FECHA_FIN, @FECHA_UL"& _ 
                "TIMA_COMPRA, @DESCRIPCION, @CANTIDAD_DIARIA, @ID_PRODUCTO, @ID_CLIENTE, @ESTATUS"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PEDIDO, NUMERO_PEDIDO, FECHA_INICIO, FECHA_FIN, FECHA_ULTIMA_COMPR"& _ 
                "A, DESCRIPCION, CANTIDAD_DIARIA, ID_PRODUCTO, ID_CLIENTE, ESTATUS FROM PEDIDO_FR"& _ 
                "ECUENTE WHERE (ID_PEDIDO = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO_PEDIDO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO_PEDIDO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_INICIO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_ULTIMA_COMPRA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_ULTIMA_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCRIPCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CANTIDAD_DIARIA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD_DIARIA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ESTATUS", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ESTATUS", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PEDIDO_FRECUENTE] SET [NUMERO_PEDIDO] = @NUMERO_PEDIDO, [FECHA_INIC"& _ 
                "IO] = @FECHA_INICIO, [FECHA_FIN] = @FECHA_FIN, [FECHA_ULTIMA_COMPRA] = @FECHA_UL"& _ 
                "TIMA_COMPRA, [DESCRIPCION] = @DESCRIPCION, [CANTIDAD_DIARIA] = @CANTIDAD_DIARIA,"& _ 
                " [ID_PRODUCTO] = @ID_PRODUCTO, [ID_CLIENTE] = @ID_CLIENTE, [ESTATUS] = @ESTATUS "& _ 
                "WHERE (([ID_PEDIDO] = @Original_ID_PEDIDO) AND ([FECHA_INICIO] = @Original_FECHA"& _ 
                "_INICIO) AND ([FECHA_FIN] = @Original_FECHA_FIN) AND ([FECHA_ULTIMA_COMPRA] = @O"& _ 
                "riginal_FECHA_ULTIMA_COMPRA) AND ([CANTIDAD_DIARIA] = @Original_CANTIDAD_DIARIA)"& _ 
                " AND ([ID_PRODUCTO] = @Original_ID_PRODUCTO) AND ([ID_CLIENTE] = @Original_ID_CL"& _ 
                "IENTE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_PEDIDO, NUMERO_PEDIDO, FECHA_INICIO, FECHA_FIN, FECHA_ULTIMA"& _ 
                "_COMPRA, DESCRIPCION, CANTIDAD_DIARIA, ID_PRODUCTO, ID_CLIENTE, ESTATUS FROM PED"& _ 
                "IDO_FRECUENTE WHERE (ID_PEDIDO = @ID_PEDIDO)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NUMERO_PEDIDO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUMERO_PEDIDO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_INICIO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA_ULTIMA_COMPRA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_ULTIMA_COMPRA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCRIPCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CANTIDAD_DIARIA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD_DIARIA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ESTATUS", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ESTATUS", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PEDIDO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PEDIDO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_FIN", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_FIN", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FECHA_ULTIMA_COMPRA", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FECHA_ULTIMA_COMPRA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CANTIDAD_DIARIA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "CANTIDAD_DIARIA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_PRODUCTO", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_PRODUCTO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_PEDIDO", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_PEDIDO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_PEDIDO, NUMERO_PEDIDO, FECHA_INICIO, FECHA_FIN, FECHA_ULTIMA_COMPRA, DE"& _ 
                "SCRIPCION, CANTIDAD_DIARIA, ID_PRODUCTO, ID_CLIENTE, ESTATUS FROM dbo.PEDIDO_FRE"& _ 
                "CUENTE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.PEDIDO_FRECUENTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.PEDIDO_FRECUENTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.PEDIDO_FRECUENTEDataTable = New FarmaciaSJDataSet.PEDIDO_FRECUENTEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.PEDIDO_FRECUENTEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PEDIDO_FRECUENTE")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_PEDIDO As Decimal, ByVal Original_FECHA_INICIO As Date, ByVal Original_FECHA_FIN As Date, ByVal Original_FECHA_ULTIMA_COMPRA As Date, ByVal Original_CANTIDAD_DIARIA As Decimal, ByVal Original_ID_PRODUCTO As Decimal, ByVal Original_ID_CLIENTE As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_PEDIDO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FECHA_INICIO,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FECHA_FIN,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FECHA_ULTIMA_COMPRA,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CANTIDAD_DIARIA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_PRODUCTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ID_CLIENTE,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMERO_PEDIDO As String, ByVal FECHA_INICIO As Date, ByVal FECHA_FIN As Date, ByVal FECHA_ULTIMA_COMPRA As Date, ByVal DESCRIPCION As String, ByVal CANTIDAD_DIARIA As Decimal, ByVal ID_PRODUCTO As Decimal, ByVal ID_CLIENTE As Decimal, ByVal ESTATUS As String) As Integer
            If (NUMERO_PEDIDO Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO_PEDIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMERO_PEDIDO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FECHA_INICIO,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FECHA_FIN,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(FECHA_ULTIMA_COMPRA,Date)
            If (DESCRIPCION Is Nothing) Then
                Throw New System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(CANTIDAD_DIARIA,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(ID_PRODUCTO,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(ID_CLIENTE,Decimal)
            If (ESTATUS Is Nothing) Then
                Throw New System.ArgumentNullException("ESTATUS")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ESTATUS,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal NUMERO_PEDIDO As String,  _
                    ByVal FECHA_INICIO As Date,  _
                    ByVal FECHA_FIN As Date,  _
                    ByVal FECHA_ULTIMA_COMPRA As Date,  _
                    ByVal DESCRIPCION As String,  _
                    ByVal CANTIDAD_DIARIA As Decimal,  _
                    ByVal ID_PRODUCTO As Decimal,  _
                    ByVal ID_CLIENTE As Decimal,  _
                    ByVal ESTATUS As String,  _
                    ByVal Original_ID_PEDIDO As Decimal,  _
                    ByVal Original_FECHA_INICIO As Date,  _
                    ByVal Original_FECHA_FIN As Date,  _
                    ByVal Original_FECHA_ULTIMA_COMPRA As Date,  _
                    ByVal Original_CANTIDAD_DIARIA As Decimal,  _
                    ByVal Original_ID_PRODUCTO As Decimal,  _
                    ByVal Original_ID_CLIENTE As Decimal,  _
                    ByVal ID_PEDIDO As Decimal) As Integer
            If (NUMERO_PEDIDO Is Nothing) Then
                Throw New System.ArgumentNullException("NUMERO_PEDIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NUMERO_PEDIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FECHA_INICIO,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FECHA_FIN,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FECHA_ULTIMA_COMPRA,Date)
            If (DESCRIPCION Is Nothing) Then
                Throw New System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CANTIDAD_DIARIA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ID_PRODUCTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ID_CLIENTE,Decimal)
            If (ESTATUS Is Nothing) Then
                Throw New System.ArgumentNullException("ESTATUS")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ESTATUS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ID_PEDIDO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FECHA_INICIO,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_FECHA_FIN,Date)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FECHA_ULTIMA_COMPRA,Date)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CANTIDAD_DIARIA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ID_PRODUCTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ID_CLIENTE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ID_PEDIDO,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CLIENTETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CLIENTE"
            tableMapping.ColumnMappings.Add("ID_CLIENTE", "ID_CLIENTE")
            tableMapping.ColumnMappings.Add("TIPO_IDENTIDAD", "TIPO_IDENTIDAD")
            tableMapping.ColumnMappings.Add("DOCUMENTO_IDENTIDAD", "DOCUMENTO_IDENTIDAD")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("APELLIDO", "APELLIDO")
            tableMapping.ColumnMappings.Add("TELEFONO", "TELEFONO")
            tableMapping.ColumnMappings.Add("DIRECCION", "DIRECCION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CLIENTE] WHERE (([ID_CLIENTE] = @Original_ID_CLIENTE))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CLIENTE] ([TIPO_IDENTIDAD], [DOCUMENTO_IDENTIDAD], [NOMBRE], ["& _ 
                "APELLIDO], [TELEFONO], [DIRECCION]) VALUES (@TIPO_IDENTIDAD, @DOCUMENTO_IDENTIDA"& _ 
                "D, @NOMBRE, @APELLIDO, @TELEFONO, @DIRECCION);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CLIENTE, TIPO_IDENTIDA"& _ 
                "D, DOCUMENTO_IDENTIDAD, NOMBRE, APELLIDO, TELEFONO, DIRECCION FROM CLIENTE WHERE"& _ 
                " (ID_CLIENTE = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TIPO_IDENTIDAD", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TIPO_IDENTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DOCUMENTO_IDENTIDAD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DOCUMENTO_IDENTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NOMBRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@APELLIDO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "APELLIDO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TELEFONO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DIRECCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CLIENTE] SET [TIPO_IDENTIDAD] = @TIPO_IDENTIDAD, [DOCUMENTO_IDENTID"& _ 
                "AD] = @DOCUMENTO_IDENTIDAD, [NOMBRE] = @NOMBRE, [APELLIDO] = @APELLIDO, [TELEFON"& _ 
                "O] = @TELEFONO, [DIRECCION] = @DIRECCION WHERE (([ID_CLIENTE] = @Original_ID_CLI"& _ 
                "ENTE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_CLIENTE, TIPO_IDENTIDAD, DOCUMENTO_IDENTIDAD, NOMBRE, APELLID"& _ 
                "O, TELEFONO, DIRECCION FROM CLIENTE WHERE (ID_CLIENTE = @ID_CLIENTE)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TIPO_IDENTIDAD", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TIPO_IDENTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DOCUMENTO_IDENTIDAD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DOCUMENTO_IDENTIDAD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NOMBRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@APELLIDO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "APELLIDO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TELEFONO", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TELEFONO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DIRECCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_CLIENTE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_CLIENTE", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_CLIENTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_CLIENTE, TIPO_IDENTIDAD, DOCUMENTO_IDENTIDAD, NOMBRE, APELLIDO, TELEFON"& _ 
                "O, DIRECCION FROM dbo.CLIENTE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.CLIENTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.CLIENTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.CLIENTEDataTable = New FarmaciaSJDataSet.CLIENTEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.CLIENTEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CLIENTE")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_CLIENTE As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_CLIENTE,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TIPO_IDENTIDAD As String, ByVal DOCUMENTO_IDENTIDAD As String, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal TELEFONO As String, ByVal DIRECCION As String) As Integer
            If (TIPO_IDENTIDAD Is Nothing) Then
                Throw New System.ArgumentNullException("TIPO_IDENTIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TIPO_IDENTIDAD,String)
            End If
            If (DOCUMENTO_IDENTIDAD Is Nothing) Then
                Throw New System.ArgumentNullException("DOCUMENTO_IDENTIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DOCUMENTO_IDENTIDAD,String)
            End If
            If (NOMBRE Is Nothing) Then
                Throw New System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NOMBRE,String)
            End If
            If (APELLIDO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(APELLIDO,String)
            End If
            If (TELEFONO Is Nothing) Then
                Throw New System.ArgumentNullException("TELEFONO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TELEFONO,String)
            End If
            If (DIRECCION Is Nothing) Then
                Throw New System.ArgumentNullException("DIRECCION")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DIRECCION,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TIPO_IDENTIDAD As String, ByVal DOCUMENTO_IDENTIDAD As String, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal TELEFONO As String, ByVal DIRECCION As String, ByVal Original_ID_CLIENTE As Decimal, ByVal ID_CLIENTE As Decimal) As Integer
            If (TIPO_IDENTIDAD Is Nothing) Then
                Throw New System.ArgumentNullException("TIPO_IDENTIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TIPO_IDENTIDAD,String)
            End If
            If (DOCUMENTO_IDENTIDAD Is Nothing) Then
                Throw New System.ArgumentNullException("DOCUMENTO_IDENTIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DOCUMENTO_IDENTIDAD,String)
            End If
            If (NOMBRE Is Nothing) Then
                Throw New System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NOMBRE,String)
            End If
            If (APELLIDO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(APELLIDO,String)
            End If
            If (TELEFONO Is Nothing) Then
                Throw New System.ArgumentNullException("TELEFONO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TELEFONO,String)
            End If
            If (DIRECCION Is Nothing) Then
                Throw New System.ArgumentNullException("DIRECCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DIRECCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID_CLIENTE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ID_CLIENTE,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LINEATableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LINEA"
            tableMapping.ColumnMappings.Add("ID_LINEA", "ID_LINEA")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("DESCUENTO_MAXIMO", "DESCUENTO_MAXIMO")
            tableMapping.ColumnMappings.Add("MARGEN_UTIL", "MARGEN_UTIL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LINEA] WHERE (([ID_LINEA] = @Original_ID_LINEA) AND ([DESCUENT"& _ 
                "O_MAXIMO] = @Original_DESCUENTO_MAXIMO) AND ([MARGEN_UTIL] = @Original_MARGEN_UT"& _ 
                "IL))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_LINEA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LINEA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DESCUENTO_MAXIMO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO_MAXIMO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MARGEN_UTIL", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "MARGEN_UTIL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LINEA] ([NOMBRE], [DESCRIPCION], [DESCUENTO_MAXIMO], [MARGEN_U"& _ 
                "TIL]) VALUES (@NOMBRE, @DESCRIPCION, @DESCUENTO_MAXIMO, @MARGEN_UTIL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT I"& _ 
                "D_LINEA, NOMBRE, DESCRIPCION, DESCUENTO_MAXIMO, MARGEN_UTIL FROM LINEA WHERE (ID"& _ 
                "_LINEA = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NOMBRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCRIPCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCUENTO_MAXIMO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO_MAXIMO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MARGEN_UTIL", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "MARGEN_UTIL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LINEA] SET [NOMBRE] = @NOMBRE, [DESCRIPCION] = @DESCRIPCION, [DESCU"& _ 
                "ENTO_MAXIMO] = @DESCUENTO_MAXIMO, [MARGEN_UTIL] = @MARGEN_UTIL WHERE (([ID_LINEA"& _ 
                "] = @Original_ID_LINEA) AND ([DESCUENTO_MAXIMO] = @Original_DESCUENTO_MAXIMO) AN"& _ 
                "D ([MARGEN_UTIL] = @Original_MARGEN_UTIL));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID_LINEA, NOMBRE, DESCRIPCIO"& _ 
                "N, DESCUENTO_MAXIMO, MARGEN_UTIL FROM LINEA WHERE (ID_LINEA = @ID_LINEA)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@NOMBRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCRIPCION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPCION", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DESCUENTO_MAXIMO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO_MAXIMO", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MARGEN_UTIL", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "MARGEN_UTIL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID_LINEA", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 0, "ID_LINEA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_DESCUENTO_MAXIMO", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCUENTO_MAXIMO", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MARGEN_UTIL", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "MARGEN_UTIL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID_LINEA", System.Data.SqlDbType.[Decimal], 9, System.Data.ParameterDirection.Input, 18, 0, "ID_LINEA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.FARMACIASJ.My.MySettings.Default.FarmaciaSJConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID_LINEA, NOMBRE, DESCRIPCION, DESCUENTO_MAXIMO, MARGEN_UTIL FROM dbo.LINE"& _ 
                "A"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As FarmaciaSJDataSet.LINEADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As FarmaciaSJDataSet.LINEADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As FarmaciaSJDataSet.LINEADataTable = New FarmaciaSJDataSet.LINEADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As FarmaciaSJDataSet.LINEADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As FarmaciaSJDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "LINEA")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID_LINEA As Decimal, ByVal Original_DESCUENTO_MAXIMO As Double, ByVal Original_MARGEN_UTIL As Double) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID_LINEA,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DESCUENTO_MAXIMO,Double)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MARGEN_UTIL,Double)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NOMBRE As String, ByVal DESCRIPCION As String, ByVal DESCUENTO_MAXIMO As Double, ByVal MARGEN_UTIL As Double) As Integer
            If (NOMBRE Is Nothing) Then
                Throw New System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NOMBRE,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESCUENTO_MAXIMO,Double)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(MARGEN_UTIL,Double)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal DESCRIPCION As String, ByVal DESCUENTO_MAXIMO As Double, ByVal MARGEN_UTIL As Double, ByVal Original_ID_LINEA As Decimal, ByVal Original_DESCUENTO_MAXIMO As Double, ByVal Original_MARGEN_UTIL As Double, ByVal ID_LINEA As Decimal) As Integer
            If (NOMBRE Is Nothing) Then
                Throw New System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NOMBRE,String)
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESCUENTO_MAXIMO,Double)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MARGEN_UTIL,Double)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID_LINEA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_DESCUENTO_MAXIMO,Double)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MARGEN_UTIL,Double)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ID_LINEA,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
